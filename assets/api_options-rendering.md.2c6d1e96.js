import{_ as s,o as n,c as a,a as l}from"./app.ea8bebef.js";const p='{"title":"옵션: 렌더링","description":"","frontmatter":{},"headers":[{"level":2,"title":"template","slug":"template"},{"level":2,"title":"render","slug":"render"},{"level":2,"title":"compilerOptions","slug":"compileroptions"}],"relativePath":"api/options-rendering.md"}',o={},e=[l('<h1 id="options-rendering" tabindex="-1">옵션: 렌더링 <a class="header-anchor" href="#options-rendering" aria-hidden="true">#</a></h1><h2 id="template" tabindex="-1">template <a class="header-anchor" href="#template" aria-hidden="true">#</a></h2><p>컴포넌트의 문자열 템플릿입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><code>template</code> 옵션을 통해 제공된 템플릿은 런타임에서 즉시 컴파일되지만, 템플릿 컴파일러가 포함된 Vue 빌드를 사용할 때만 지원됩니다. 그러나 이름에 <code>runtime</code> 단어가 포함된 <code>vue.runtime.esm-bundler.js</code>라는 템플릿 컴파일러는 Vue 빌드에 포함되어있지 않습니다. 다른 빌드의 자세한 내용은 <a href="https://github.com/vuejs/core/tree/main/packages/vue#which-dist-file-to-use" target="_blank" rel="noopener noreferrer">dist 파일 가이드</a>를 참고하세요.</p><p>문자열이 <code>#</code>로 시작하면 <code>querySelector</code>로 사용되고, 선택한 엘리먼트의 <code>innerHTML</code>을 템플릿 문자열로 사용합니다. 이를 통해 네이티브 <code>&lt;template&gt;</code> 엘리먼트를 사용하여 소스 템플릿을 작성할 수 있습니다.</p><p>동일한 컴포넌트에 <code>render</code> 옵션도 있는 경우, <code>template</code>은 무시됩니다.</p><p>앱의 루트 컴포넌트에 <code>template</code> 또는 <code>render</code> 옵션이 지정되지 않은 경우, Vue는 마운트된 엘리먼트의 <code>innerHTML</code>을 템플릿으로 사용하려고 시도합니다.</p><div class="warning custom-block"><p class="custom-block-title">보안 참고 사항</p><p>신뢰할 수 있는 템플릿 소스만 사용해야 합니다. 사용자가 제공한 컨텐츠를 템플릿으로 사용하면 안됩니다. 자세한 내용은 <a href="/guide/best-practices/security.html#rule-no-1-never-use-non-trusted-templates">가이드 - 보안</a> 참고.</p></div></li></ul><h2 id="render" tabindex="-1">render <a class="header-anchor" href="#render" aria-hidden="true">#</a></h2><p>컴포넌트의 가상 DOM 트리를 프로그래밍 방식으로 반환하는 함수입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">?(this:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChild</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChild</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span><span style="color:#FFCB6B;">VNodeArrayChildren</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNodeChildAtom</span><span style="color:#A6ACCD;">)[]</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><code>render</code>는 문자열 템플릿의 대안으로, 템플릿 전체를 JavaScript 프로그래밍 능력을 활용하여, 컴포넌트의 렌더링 출력을 선언할 수 있습니다.</p><p>예를 들어 싱글 파일 컴포넌트(SFC)에 있는 것처럼, 미리 컴파일된 템플릿은 빌드 시 <code>render</code> 옵션으로 컴파일됩니다. 컴포넌트에 <code>render</code>와 <code>template</code>이 모두 있는 경우, <code>render</code>가 더 높은 우선 순위를 갖습니다.</p></li><li><p><strong>참고</strong>:</p><ul><li><a href="/guide/extras/rendering-mechanism.html">가이드 - 렌더링 메커니즘</a></li><li><a href="/guide/extras/render-function.html">가이드 - Render Functions</a></li></ul></li></ul><h2 id="compileroptions" tabindex="-1">compilerOptions <a class="header-anchor" href="#compileroptions" aria-hidden="true">#</a></h2><p>컴포넌트의 템플릿의 런타임 컴파일러 옵션을 구성합니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">compilerOptions</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">isCustomElement</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">whitespace</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">condense</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preserve</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 기본 값: &#39;condense&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">delimiters</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> [</span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">] </span><span style="color:#676E95;font-style:italic;">// 기본 값: [&#39;{{&#39;, &#39;}}&#39;]</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">comments</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 기본 값: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p>이 환경설정(config) 옵션은 전체 빌드(예: 브라우저에서 템플릿을 컴파일할 수 있는 독립 실행형 <code>vue.js</code>)를 사용할 때만 적용됩니다. 앱 레벨의 <a href="/api/application.html#app-config-compileroptions">app.config.compilerOptions</a>와 동일한 옵션을 지원하며, 현재 컴포넌트가 더 높은 우선 순위를 갖습니다.</p></li><li><p><strong>참고</strong>: <a href="/api/application.html#app-config-compileroptions">app.config.compilerOptions</a></p></li></ul>',10)];var t=s(o,[["render",function(s,l,p,o,t,r){return n(),a("div",null,e)}]]);export{p as __pageData,t as default};
