import{g as s,r as n,o as l,c as a,e as o,F as e,n as p,X as t,t as c,f as r,_ as y,j as i,w as F,a as D,d as A}from"./app.4f365495.js";const C={class:"tabs"},h=["onClick"],d={class:"code-example"},u=y(s({__name:"TestingApiSwitcher",setup(s){const y=n("vtu-api"),i=[{label:"Vue Test Utils",className:"vtu-api"},{label:"Cypress",className:"cypress-api"},{label:"Testing Library",className:"testing-library-api"}];return(s,n)=>(l(),a("div",{class:t(["testing-code-examples",`prefers-${y.value}`])},[o("div",C,[(l(),a(e,null,p(i,(s=>o("div",{key:s.className,class:t(["tab",{active:s.className===y.value}]),onClick:n=>y.value=s.className},c(s.label),11,h))),64))]),o("div",d,[r(s.$slots,"default")])],2))}}),[["__scopeId","data-v-36595bd6"]]),g=D('<h1 id="testing" tabindex="-1">테스트 <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h1><h2 id="why-test" tabindex="-1">왜 테스트 해야 할까요? <a class="header-anchor" href="#why-test" aria-hidden="true">#</a></h2><p>자동화된 테스트는 여러 의미에서 퇴보될 수 있는 코드를 사전에 방지하고, 앱을 테스트 가능한 함수, 모듈, 클래스 및 컴포넌트로 분할하도록 권장하여, 귀하와 귀하의 팀이 복잡한 Vue 앱을 빠르고 자신 있게 빌드하는 데 도움이 됩니다. 다른 앱과 마찬가지로 새 Vue 앱은 여러 가지 방법으로 중단될 수 있으며, 릴리스 전에 이러한 문제를 파악하고 수정할 수 있는 것이 중요합니다.</p><p>이 가이드에서는 기본 용어를 다루고 Vue 3 앱에 어떤 도구를 선택해야 하는지에 대한 권장 사항을 제공합니다.</p><p>컴포저블을 다루는 Vue 특정 섹션이 있습니다. 자세한 내용은 아래의 <a href="#testing-composables">컴포저블 테스트</a>를 참조하세요.</p><h2 id="when-to-test" tabindex="-1">테스트 시기 <a class="header-anchor" href="#when-to-test" aria-hidden="true">#</a></h2><p>어서 테스트을 시작하세요!! 가능한 한 빨리 테스트 작성을 시작하는 것이 좋습니다. 앱에 테스트 추가를 미룰수록 앱에 더 많은 의존성이 생기고 시작하기가 더 어려워집니다.</p><h2 id="testing-types" tabindex="-1">테스트 유형 <a class="header-anchor" href="#testing-types" aria-hidden="true">#</a></h2><p>Vue 앱의 테스트 전략을 설계할 때는 다음 테스트 유형을 활용해야 합니다:</p><ul><li><strong>단위</strong>: 주어진 함수, 클래스 또는 컴포저블에 제공된 입력 정보가 의도하는 출력 또는 사이드 이팩트를 생성하는지 확인합니다.</li><li><strong>컴포넌트</strong>: 컴포넌트가 마운트, 렌더링, 상호 작용이 의도대로 작동하는지 확인합니다. 이러한 테스트는 단위 테스트보다 더 많은 코드를 가져오고 더 복잡하며 실행하는 데 더 많은 시간이 필요합니다.</li><li><strong>End-to-end</strong>: 여러 페이지에 걸쳐 있는 기능을 확인하고, 프로덕션으로 빌드되는 Vue 앱처럼 실제 네트워크 요청을 합니다. 이러한 테스트에는 종종 데이터베이스 또는 기타 백엔드를 구축하는 작업이 포함됩니다.</li></ul><p>테스트 전략에서 각 테스트 유형은 앱의 각기 다른 유형의 문제로부터 사용자를 보호하는 역할을 합니다.</p><h2 id="overview" tabindex="-1">개요 <a class="header-anchor" href="#overview" aria-hidden="true">#</a></h2><p>각 기능에 대해 간략한 설명과 Vue 앱에 이러한 기능을 구현하는 방법 및 몇 가지 일반적인 권장 사항에 대해 알아보겠습니다.</p><div class="info custom-block"><p class="custom-block-title">용어 설명</p><p>이 가이드 문서에서는 수차례 &quot;모의&quot;(영문에서: mock)라는 단어가 나옵니다. 사전적 의미와 유사지만 원활한 맥락 파악을 위해서</p><blockquote><p>&quot;테스트 대상과 상호작용 하는 환경 또는 구성품들이, 이미 의도대로 구성되어 있다고 가정&quot;</p></blockquote><p>하는 것이라고 인지하고 있는 것이 좋습니다.</p></div><h2 id="unit-testing" tabindex="-1">단위 테스트 <a class="header-anchor" href="#unit-testing" aria-hidden="true">#</a></h2><p>단위 테스트는 작고 독립된 코드 단위가 예상대로 작동하는지 확인하기 위해 작성됩니다. 단위 테스트는 일반적으로 단일 함수, 클래스, 컴포저블 또는 모듈을 다룹니다. 단위 테스트는 논리적 정확성에 초점을 맞추고 앱의 전체 기능 중 작은 부분에만 관심을 둡니다. 앱 환경의 많은 부분(예: 초기 상태, 복잡한 클래스, 타사 모듈 및 네트워크 요청)을 모의할 수 있습니다.</p><p>일반적으로 단위 테스트는 함수가 해야 할 일에 대한 논리 및 논리적 정확성 문제를 포착합니다.</p><p>예를 들어 다음 <code>increment</code> 함수를 살펴봅시다:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// helpers.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">increment</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">current</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">max</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">max</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">current</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>매우 독립적이기 때문에 이 함수를 호출하고 의도하는 결과 값을 반환한다는 검증이 쉬워보이므로, 단위 테스트를 작성해 보겠습니다.</p><p>이러한 검증 중 하나라도 실패하면 문제가 <code>increment</code> 함수에 있음이 분명합니다.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// helpers.spec.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./helpers</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line highlighted"><span style="color:#82AAFF;">describe</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">increment</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">현재 숫자를 1씩 증가</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">현재 숫자를 최대값 이상으로 증가시키지 않습니다.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">기본 최대값은 10입니다.</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">10</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>앞서 언급했듯이 단위 테스트는 일반적으로 UI 렌더링, 네트워크 요청 또는 기타 환경 문제를 포함하지 않는 자체적으로 해야 할 일에 대한 논리, 컴포넌트, 클래스, 모듈 또는 함수에 적용됩니다.</p><p>이들은 일반적으로 Vue와 관련이 없는 일반 JavaScript/TypeScript 모듈입니다. 일반적으로 Vue 앱에서 비즈니스 로직에 대한 단위 테스트를 작성하는 것은 다른 프레임워크를 사용하는 앱과 크게 다르지 않습니다.</p><p>Vue 관련 기능을 단위 테스트하는 두 가지 경우가 있습니다.</p><ol><li>컴포저블</li><li>컴포넌트</li></ol><h3 id="composables" tabindex="-1">컴포저블 <a class="header-anchor" href="#composables" aria-hidden="true">#</a></h3><p>Vue 앱에 특별한 함수의 한 범주인 <a href="/guide/reusability/composables.html">컴포저블</a>은 테스트 중에 특별한 처리가 필요할 수 있습니다. 자세한 내용은 아래의 <a href="#testing-composables">컴포저블 테스트</a>를 참조하세요.</p><h3 id="unit-testing-components" tabindex="-1">컴포넌트 단위 테스트 <a class="header-anchor" href="#unit-testing-components" aria-hidden="true">#</a></h3><p>컴포넌트는 두 가지 방법으로 테스트할 수 있습니다:</p><ol><li><p>Whitebox: 단위 테스트</p><p>&quot;화이트박스 테스트&quot;는 컴포넌트의 구현 세부 정보 및 의존성을 인식합니다. 테스트 중인 컴포넌트를 <strong>격리</strong>하는 데 중점을 둡니다. 이러한 테스트에는 일반적으로 컴포넌트의 모든 자식은 아닐지라도 일부를 모의하고 플러그인 상태 및 의존성(예: Vuex)을 설정하는 작업이 포함됩니다.</p></li><li><p>Blackbox: 컴포넌트 테스트</p><p>&quot;블랙박스 테스트&quot;는 컴포넌트의 구현 세부 정보를 인식하지 못합니다. 이러한 테스트는 컴포넌트와 전체 시스템의 통합을 테스트하기 위해 가능한 한 적게 모의합니다. 일반적으로 모든 자식 컴포넌트를 렌더링하며 &quot;통합 테스트&quot;에 가깝습니다. 아래의 <a href="#component-testing">컴포넌트 테스트 권장 사항</a>을 참조하세요.</p></li></ol><h3 id="recommendation" tabindex="-1">추천 <a class="header-anchor" href="#recommendation" aria-hidden="true">#</a></h3><ul><li><p><a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a></p><p><code>create-vue</code>로 생성된 공식 설정은 <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>를 기반으로 하므로 동일한 구성을 활용하고 Vite에서 직접 파이프라인을 변환할 수 있는 단위 테스트 프레임워크를 사용하는 것이 좋습니다. <a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a>는 이러한 목적을 위해 특별히 설계된 단위 테스트 프레임워크로 Vue/Vite 팀이 만들고 유지 관리합니다. 최소한의 노력으로 Vite 기반 프로젝트와 통합되며, 매우 빠릅니다.</p></li></ul><h3 id="other-options" tabindex="-1">다른 선택지 <a class="header-anchor" href="#other-options" aria-hidden="true">#</a></h3><ul><li><p><a href="https://peeky.dev/" target="_blank" rel="noreferrer">Peeky</a>는 최고의 Vite 통합 기능을 갖춘 또 다른 빠른 단위 테스트 러너입니다. 또한 Vue 핵심 팀 구성원이 만들고 GUI 기반 테스트 인터페이스를 제공합니다.</p></li><li><p><a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a>는 인기 있는 단위 테스트 프레임워크이며, <a href="https://github.com/sodatea/vite-jest" target="_blank" rel="noreferrer">vite-jest</a> 패키지를 통해 Vite와 함께 작동하도록 만들 수 있습니다. 그러나 Vitest가 보다 원활한 통합과 더 나은 성능을 제공하므로 Vite 기반 프로젝트로 마이그레이션해야 하는 기존 Jest 테스트 제품군이 있는 경우에만 Jest를 권장합니다.</p></li></ul><h2 id="component-testing" tabindex="-1">컴포넌트 테스트 <a class="header-anchor" href="#component-testing" aria-hidden="true">#</a></h2><p>Vue 앱에서 컴포넌트는 UI 구성의 주요 요소입니다. 따라서 컴포넌트는 앱의 동작을 검증할 때 자연스럽게 독립된 단위입니다. 컴포넌트 테스트는 단위 테스트의 상위 개념이며, 통합 테스트의 한 형태로 간주될 수 있습니다. Vue 앱의 대부분은 컴포넌트 테스트로 다루어야 하며, 각 Vue 컴포넌트에는 자체 스팩 파일이 있는 것이 좋습니다.</p><p>컴포넌트 테스트는 컴포넌트의 props, 이벤트, 제공하는 슬롯, 스타일, 클래스, 수명 주기 훅 등과 관련된 문제를 포착해야 합니다.</p><p>컴포넌트 테스트는 자식 컴포넌트를 모의해서는 안 되며, 사용자가 하는 것처럼 컴포넌트와 상호 작용하여 컴포넌트와 해당 자식 간의 상호 작용을 테스트해야 합니다. 예를 들어, 컴포넌트 테스트는 프로그래밍 방식으로 컴포넌트와 상호 작용하는 대신 사용자가 엘리먼트를 클릭하는 것과 같아야 합니다.</p><p>컴포넌트 테스트는 내부 구현 세부 사항보다는 컴포넌트의 공개 인터페이스에 중점을 두어야 합니다. 대부분의 컴포넌트에서 공개 인터페이스는 이벤트 발생, props 및 슬롯정도 입니다. &quot;<strong>컴포넌트가 어떻게 작동하는지가 아니라, 어떤 작동을 하는지</strong>&quot;를 테스트해야 합니다.</p><p><strong>해야 할 것</strong></p><ul><li><p><strong>시각적</strong> 로직의 경우: 입력된 props 및 슬롯을 기반으로 올바른 렌더링 출력을 검증합니다.</p></li><li><p><strong>작동</strong> 로직의 경우: 사용자 입력 이벤트에 대한 응답으로 올바른 렌더링 업데이트 또는 발송(emit)된 이벤트를 검증합니다.</p><p>아래 예에서는 &quot;increment&quot;라는 레이블이 지정된 DOM 엘리먼트가 있고, 클릭할 수 있는 스테퍼 컴포넌트를 보여줍니다. 스테퍼가 <code>2</code>를 초과하여 계속 증가하지 않도록 하는 <code>max</code>라는 prop을 전달하므로, 버튼을 3번 클릭해도 UI는 여전히 <code>2</code>를 표시해야 합니다.</p><p>우리는 스테퍼의 구현에 대해 아는 것이 없고, 단지 &quot;입력&quot;이 <code>max</code>라는 prop이고, &quot;출력&quot;이 사용자가 보게 될 DOM의 상태라는 것 뿐입니다.</p></li></ul>',42),m=o("div",{class:"testing-library-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki material-theme-palenight"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{"),o("span",{style:{color:"#A6ACCD"}}," getByText "),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"render"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},") "),o("span",{style:{color:"#676E95","font-style":"italic"}},'// "0"이 컴포넌트 내에 있어야 함')]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," button "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"increment"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// 클릭 이벤트 발송")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF","font-style":"italic"}},"await"),o("span",{style:{color:"#A6ACCD"}}," fireEvent"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"(button)")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"getByText"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF","font-style":"italic"}},"await"),o("span",{style:{color:"#A6ACCD"}}," fireEvent"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"(button)")]),A("\n"),o("span",{class:"line"})])])])],-1),f=o("div",{class:"vtu-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki material-theme-palenight"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," valueSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=stepper-value]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," buttonSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=increment]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," wrapper "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"mount"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"expect"),o("span",{style:{color:"#A6ACCD"}},"(wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"text"),o("span",{style:{color:"#A6ACCD"}},"())"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"toContain"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF","font-style":"italic"}},"await"),o("span",{style:{color:"#A6ACCD"}}," wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(buttonSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"trigger"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"click"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"expect"),o("span",{style:{color:"#A6ACCD"}},"(wrapper"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"find"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"text"),o("span",{style:{color:"#A6ACCD"}},"())"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"toContain"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"})])])])],-1),b=o("div",{class:"cypress-api"},[o("div",{class:"language-js"},[o("button",{title:"Copy Code",class:"copy"}),o("span",{class:"lang"},"js"),o("pre",{class:"shiki material-theme-palenight"},[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," valueSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=stepper-value]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," buttonSelector "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"[data-testid=increment]"),o("span",{style:{color:"#89DDFF"}},"'")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"mount"),o("span",{style:{color:"#A6ACCD"}},"(Stepper"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#F07178"}},"props"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#F07178"}},"max"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"1")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"}),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"cy"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"should"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"be.visible"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"and"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"contain.text"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"0"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(buttonSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"click"),o("span",{style:{color:"#A6ACCD"}},"()")]),A("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"get"),o("span",{style:{color:"#A6ACCD"}},"(valueSelector)"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"should"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"contain.text"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"1"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),A("\n"),o("span",{class:"line"})])])])],-1),v=D('<ul><li><p><strong>하지 말아야 할 것</strong></p><p>컴포넌트 인스턴스의 개인 상태를 검증하거나 컴포넌트의 개인 메서드를 테스트하지 마십시오. 구현 세부 정보를 테스트하면 테스트가 중단될 가능성이 높고 구현이 변경될 때 업데이트가 필요하기 때문에 테스트가 취약해집니다.</p><p>컴포넌트의 궁극적인 역할은 올바른 DOM 출력을 렌더링하는 것이므로, DOM 출력에 초점을 맞춘 테스트는 변경사항에도 강력하고 탄력적이면서 동일한 수준의 정확성 보장을 제공합니다.</p><p>스냅샷 테스트에만 의존하지 마십시오. HTML 문자열을 검증하는 것이 정확성을 의미하지 않으므로 명확한 목적이 있는 테스트를 작성하십시오.</p><p>메서드를 철저히 테스트해야 하는 경우, 독립 실행형 유틸리티 기능으로 추출하는 것을 고려하고, 전용 단위 테스트를 작성하십시오. 깔끔하게 추출할 수 없는 경우, 컴포넌트나 통합 또는 이를 포괄하는 E2E 테스트의 일부로 테스트할 수 있습니다.</p></li></ul><h3 id="recommendation-1" tabindex="-1">추천 <a class="header-anchor" href="#recommendation-1" aria-hidden="true">#</a></h3><ul><li><p>헤드리스로 렌더링되는 컴포넌트 또는 컴포넌트의 <a href="https://vitest.dev/" target="_blank" rel="noreferrer">Vitest</a>(예: VueUse의 <a href="https://vueuse.org/core/useFavicon/#usefavicon" target="_blank" rel="noreferrer"><code>useFavicon</code></a> 함수). 컴포넌트와 DOM은 <a href="https://testing-library.com/docs/vue-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/vue</a>를 사용하여 테스트할 수 있습니다.</p></li><li><p>예상 동작이 스타일을 올바르게 렌더링하거나 기본 DOM 이벤트를 트리거하는 데 의존하는 컴포넌트에 대한 <a href="https://on.cypress.io/component" target="_blank" rel="noreferrer">Cypress 컴포넌트 테스트</a>. <a href="https://testing-library.com/docs/cypress-testing-library/intro" target="_blank" rel="noreferrer">@testing-library/cypress</a> 테스팅 라이브러리로 사용할 수 있습니다.</p></li></ul><p>Vitest와 브라우저 기반 러너의 주요 차이점은 속도와 실행 컨텍스트입니다. 간단히 말해서, Cypress와 같은 브라우저 기반 러너는 Vitest와 같은 노드 기반 러너가 포착할 수 없는 문제(예: 스타일 문제, 실제 네이티브 DOM 이벤트, 쿠키, 로컬 스토리지 및 네트워크 에러)를 포착할 수 있지만, 브라우저 기반 러너는 브라우저를 열고 스타일시트를 컴파일하는 등의 작업을 수행하기 때문에 <em>Vitest보다 훨씬 느립니다</em>. Cypress는 컴포넌트 테스트를 지원하는 브라우저 기반 러너입니다. Vitest와 Cypress를 비교한 최신 정보는 <a href="https://vitest.dev/guide/comparisons.html#cypress" target="_blank" rel="noreferrer">비교 페이지</a>를 참조하십시오.</p><h3 id="mounting-libraries" tabindex="-1">마운팅 라이브러리 <a class="header-anchor" href="#mounting-libraries" aria-hidden="true">#</a></h3><p>컴포넌트 테스트에는 테스트 중인 컴포넌트를 격리하여 탑재하고, 시뮬레이션된 사용자 입력 이벤트를 트리거하고, 렌더링된 DOM 출력에 대한 검증이 포함되는 경우가 많습니다. 이러한 작업을 더 간단하게 만드는 전용 유틸리티 라이브러리가 있습니다.</p><ul><li><p><a href="https://github.com/testing-library/vue-testing-library" target="_blank" rel="noreferrer"><code>@testing-library/vue</code></a>는 구현 세부 사항에 의존하지 않고 컴포넌트를 테스트하는 데 중점을 둔 Vue 테스트 라이브러리입니다. 접근성을 염두에 두고 구축된 이 접근 방식은 리팩토링도 수월하게 해줍니다. 그 기본 원칙은 테스트가 소프트웨어 사용 방법과 더 많이 유사할수록 더 많은 신뢰를 제공할 수 있다는 것이다.</p></li><li><p><a href="https://github.com/vuejs/test-utils" target="_blank" rel="noreferrer"><code>@vue/test-utils</code></a>는 사용자에게 Vue 특정 API에 대한 접근을 제공하기 위해 작성된 공식 저수준 컴포넌트 테스트 라이브러리입니다. 또한 저수준 라이브러리 <code>@testing-library/vue</code>가 그 위에 구축됩니다.</p></li></ul><p>앱의 테스트 우선 순위와 초점이 더 잘 맞기 때문에 앱의 컴포넌트를 테스트할 때 <code>@testing-library/vue</code>를 사용하는 것이 좋습니다. Vue 전용 내부 테스트가 필요한 고급 컴포넌트를 빌드하는 경우에만 <code>@vue/test-utils</code>를 사용하세요.</p><h3 id="other-options-1" tabindex="-1">다른 선택지 <a class="header-anchor" href="#other-options-1" aria-hidden="true">#</a></h3><ul><li><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch</a>는 Vue 컴포넌트 테스트를 지원하는 E2E 테스트 러너입니다. (Nightwatch v2의 <a href="https://github.com/nightwatchjs-community/todo-vue" target="_blank" rel="noreferrer">예제 프로젝트</a>)</li></ul><h2 id="e2e-testing" tabindex="-1">E2E 테스트 <a class="header-anchor" href="#e2e-testing" aria-hidden="true">#</a></h2><p>단위 테스트는 개발자에게 어느 정도의 확신을 제공하지만, 단위 및 컴포넌트 테스트는 프로덕션에 배포할 때 앱에 대한 전체적인 범위를 제공하는 능력이 제한적입니다. 결과적으로 E2E(end-to-end) 테스트는 앱의 가장 중요한 측면인 사용자가 실제로 앱을 사용할 때 어떤 일이 발생하는지에 대한 범위를 제공합니다.</p><p>E2E 테스트는 프로덕션으로 빌드된 Vue 앱에 대해 네트워크 요청을 필요로하는 다중 페이지 앱 동작에 중점을 둡니다. 이것들은 종종 데이터베이스 또는 기타 백엔드를 유지하는 것과 관련되며 라이브 스테이징 환경에 대해 실행될 수도 있습니다.</p><p>E2E 테스트는 종종 라우터, 상태 관리 라이브러리, 최상위 컴포넌트(예: 앱 또는 레이아웃), 퍼블릭 애셋 또는 요청 처리와 관련된 문제를 확인합니다. 위에서 언급했듯이 단위 테스트 또는 컴포넌트 테스트로 포착할 수 없는 중요한 문제를 포착합니다.</p><p>E2E 테스트는 Vue 앱의 코드를 가져오지 않지만, 대신 실제 브라우저에서 전체 페이지를 탐색하여 앱을 테스트하는데 전적으로 의존합니다.</p><p>E2E 테스트는 앱의 많은 계층을 검증합니다. 로컬로 구축된 앱 또는 라이브 스테이징 환경을 대상으로 할 수 있습니다. 스테이징 환경에 대한 테스트에는 프론트엔드 코드와 정적 서버뿐만 아니라 관련된 모든 백엔드 서비스 및 인프라가 포함됩니다.</p><blockquote><p>테스트가 소프트웨어 사용 방식과 유사할수록 더 많은 자신감을 얻을 수 있습니다. - <a href="https://twitter.com/kentcdodds/status/977018512689455106" target="_blank" rel="noreferrer">Kent C. Dodds</a> - 테스트 라이브러리의 저자</p></blockquote><p>사용자 작업이 앱에 미치는 영향을 테스트함으로써, E2E 테스트는 종종 앱이 제대로 작동하는지 여부에 대한 신뢰도를 높입니다.</p><h3 id="choosing-an-e2e-testing-solution" tabindex="-1">E2E 테스트 솔루션 선택 <a class="header-anchor" href="#choosing-an-e2e-testing-solution" aria-hidden="true">#</a></h3><p>웹에서의 E2E 테스트는 신뢰할 수 없는 테스트 및 개발 프로세스 속도 저하로 부정적인 평판을 얻었지만, 최신 E2E 도구는 보다 안정적이고 대화식이며 유용한 테스트를 만들기 위해 발전했습니다. 다음 섹션에서는 E2E 테스트 프레임워크를 선택할 때, 앱에 대한 테스트 프레임워크를 선택할 때 염두에 두어야 할 사항에 대한 몇 가지 지침을 제공합니다.</p><h4 id="cross-browser-testing" tabindex="-1">브라우저 간 테스트 <a class="header-anchor" href="#cross-browser-testing" aria-hidden="true">#</a></h4><p>E2E 테스트의 주요 이점 중 하나는 여러 브라우저에서 앱을 테스트할 수 있다는 것입니다. 100% 크로스 브라우저 적용 범위를 갖는 것이 바람직해 보일 수 있지만, 크로스 브라우저 테스트는 팀 리소스를 일관되게 실행하는 데 필요한 추가 시간과 시스템 성능으로 인해 팀 리소스에 대한 효율성이 감소한다는 점에 유의해야 합니다. 결과적으로 앱에 필요한 크로스 브라우저 테스트의 양을 선택할 때 이 절충점을 염두에 두는 것이 중요합니다.</p><h4 id="faster-feedback-loops" tabindex="-1">더 빠른 피드백 루프 <a class="header-anchor" href="#faster-feedback-loops" aria-hidden="true">#</a></h4><p>E2E 테스트 및 개발의 주요 문제 중 하나는, 제품군 전체를 실행하는 데 오랜 시간이 걸린다는 것입니다. 일반적으로 이는 CI/CD 파이프라인에서만 수행됩니다. 최신 E2E 테스트 프레임워크는 병렬화와 같은 기능을 추가하여 이 문제를 해결하는 데 도움이 되었습니다. 또한 로컬에서 개발할 때, 작업 중인 페이지에 대해 단일 테스트를 선택적으로 실행하는 동시에 테스트의 핫 리로딩을 제공하는 기능은 개발자의 워크플로와 생산성을 높이는 데 도움이 될 수 있습니다.</p><h4 id="first-class-debugging-experience" tabindex="-1">최고의 디버깅 경험 <a class="header-anchor" href="#first-class-debugging-experience" aria-hidden="true">#</a></h4><p>개발자는 전통적으로 테스트에서 무엇이 잘못되었는지 확인하기 위해 터미널 창에서 로그를 스캔하는 데 의존해 왔지만, 최신 E2E 테스트 프레임워크는 개발자들이 이미 익숙한 도구들, 예를 들어 브라우저 개발자 도구들을 활용할 수 있게 합니다.</p><h4 id="visibility-in-headless-mode" tabindex="-1">헤드리스 모드의 가시성 <a class="header-anchor" href="#visibility-in-headless-mode" aria-hidden="true">#</a></h4><p>E2E 테스트가 지속적인 CI/CD 파이프라인에서 실행될 때, 종종 헤드리스 브라우저에서 실행됩니다. 최신 E2E 테스트 프레임워크의 중요한 기능은 테스트 중에 앱의 스냅샷 또는 비디오를 보고 에러가 발생하는 이유를 파악할 수 있는 기능입니다. 역사적으로 이러한 통합을 유지하는 것은 지루했습니다.</p><h3 id="recommendation-2" tabindex="-1">추천 <a class="header-anchor" href="#recommendation-2" aria-hidden="true">#</a></h3><ul><li><p><a href="https://www.cypress.io/" target="_blank" rel="noreferrer">Cypress</a></p><p>전반적으로 우리는 Cypress가 유익한 UI, 뛰어난 디버깅 가능성, 빌트인 검증 및 stubs, 내결함성, 병렬화 및 스냅샷과 같은 기능을 갖춘 가장 완벽한 E2E 솔루션을 제공한다고 믿습니다. 위에서 언급했듯이 <a href="https://docs.cypress.io/guides/component-testing/introduction" target="_blank" rel="noreferrer">컴포넌트 테스트</a>도 지원합니다. 그러나 Chromium 기반 브라우저와 Firefox만 지원합니다.</p></li></ul><h3 id="other-options-2" tabindex="-1">다른 선택지 <a class="header-anchor" href="#other-options-2" aria-hidden="true">#</a></h3><ul><li><p><a href="https://playwright.dev/" target="_blank" rel="noreferrer">Playwright</a>는 광범위한 브라우저 지원(주로 WebKit)을 갖춘 훌륭한 E2E 테스트 솔루션입니다. 자세한 내용은 <a href="https://playwright.dev/docs/why-playwright" target="_blank" rel="noreferrer">Why Playwright</a>를 참조하십시오.</p></li><li><p><a href="https://v2.nightwatchjs.org/" target="_blank" rel="noreferrer">Nightwatch v2</a>는 <a href="https://www.npmjs.com/package/selenium-webdriver" target="_blank" rel="noreferrer">Selenium WebDriver</a> 기반의 E2E 테스트 솔루션입니다. 이것은 가장 광범위한 브라우저 지원 범위를 제공합니다.</p></li></ul><h2 id="recipes" tabindex="-1">레시피 <a class="header-anchor" href="#recipes" aria-hidden="true">#</a></h2><h3 id="adding-vitest-to-a-project" tabindex="-1">프로젝트에 Vitest 추가 <a class="header-anchor" href="#adding-vitest-to-a-project" aria-hidden="true">#</a></h3><p>Vite 기반 Vue 프로젝트에서 다음을 실행:</p><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> npm install -D vitest happy-dom @testing-library/vue</span></span>\n<span class="line"></span></code></pre></div><p>다음으로 <code>test</code> 옵션 블록을 추가하도록 Vite 구성을 업데이트:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// jest와 같은 전역 테스트 API 사용</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">globals</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// happy-dom으로 DOM 시뮬레이션</span></span>\n<span class="line highlighted"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// (피어 의존성으로 happy-dom을 설치해야 함)</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">environment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">happy-dom</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>TypeScript를 사용하는 경우 <code>tsconfig.json</code>의 <code>types</code> 필드에 <code>vtest/globals</code>를 추가합니다.</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// tsconfig.json</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compileroptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitest/globals</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><p>그런 다음 프로젝트에서 <code>*.test.js</code>로 끝나는 파일을 만듭니다. 모든 테스트 파일은 프로젝트 루트의 테스트 디렉터리 또는 소스(원본) 파일 옆의 테스트 디렉터리에 배치할 수 있습니다. Vitest는 명명 규칙을 사용하여 자동으로 검색합니다.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// MyComponent.test.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">render</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@testing-library/vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MyComponent.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">it should work</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">getByText</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">render</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    props</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 검증 통과를 위한 출력 값</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">getByText</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>마지막으로 <code>package.json</code>을 업데이트하여 테스트 스크립트를 추가하고 실행:</p><div class="language-json"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki material-theme-palenight has-highlighted-lines"><code><span class="line"><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">scripts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line highlighted"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">test</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vitest</span><span style="color:#89DDFF;">&quot;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-sh"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> npm test</span></span>\n<span class="line"></span></code></pre></div><h3 id="testing-composables" tabindex="-1">컴포저블 테스트 <a class="header-anchor" href="#testing-composables" aria-hidden="true">#</a></h3><blockquote><p>이 섹션은 <a href="/guide/reusability/composables.html">컴포저블</a> 섹션을 읽었다고 가정합니다.</p></blockquote><p>컴포저블을 테스트할 때, 호스트 컴포넌트 인스턴스에 의존하는 경우와 그렇지 않은 경우 두 가지 범주로 나눌 수 있습니다.</p><p>컴포저블은 아래 API를 사용할 때 호스트 컴포넌트 인스턴스에 따라 달라집니다.</p><ul><li>수명 주기 훅</li><li>Provide(제공) / Inject(주입)</li></ul><p>컴포저블이 반응형 API만 사용하는 경우 직접 호출하고, 반환된 상태/메서드를 검증하여 테스트할 수 있습니다:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// counter.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ref</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">useCounter</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">increment</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// counter.test.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useCounter</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./counter.js</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">useCounter</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">increment</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useCounter</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">increment</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>수명 주기 훅 또는 Provide/Inject에 의존하는 컴포저블은 테스트할 호스트 컴포넌트에 래핑되어야 합니다. 다음과 같은 핼퍼를 만들 수 있습니다:</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// test-utils.js</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">createApp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">withSetup</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">composable</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">let</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">result</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    setup</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">result</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">composable</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 누락된 템플릿 경고 억제</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">mount</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">div</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 결과를 반환하고</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// provide/unmount 테스트를 위한 앱 인스턴스 </span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;">]</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">withSetup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./test-utils</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">useFoo</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">test</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">useFoo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">]</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">withSetup</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">useFoo</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">123</span><span style="color:#F07178;">))</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 테스트 inject(주입)를 위한 모의 제공</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">provide</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 검증 실행</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">result</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">foo</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 필요한 경우 onUnmounted 훅 실행</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">unmount</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>더 복잡한 컴포저블의 경우, <a href="#component-testing">컴포넌트 테스트</a> 기술을 사용하여 래퍼 컴포넌트에 대한 테스트를 작성하여 테스트하는 것이 더 쉬울 수도 있습니다.</p>',56),E=JSON.parse('{"title":"테스트","description":"","frontmatter":{},"headers":[{"level":2,"title":"왜 테스트 해야 할까요?","slug":"why-test","link":"#why-test","children":[]},{"level":2,"title":"테스트 시기","slug":"when-to-test","link":"#when-to-test","children":[]},{"level":2,"title":"테스트 유형","slug":"testing-types","link":"#testing-types","children":[]},{"level":2,"title":"개요","slug":"overview","link":"#overview","children":[]},{"level":2,"title":"단위 테스트","slug":"unit-testing","link":"#unit-testing","children":[{"level":3,"title":"컴포저블","slug":"composables","link":"#composables","children":[]},{"level":3,"title":"컴포넌트 단위 테스트","slug":"unit-testing-components","link":"#unit-testing-components","children":[]},{"level":3,"title":"추천","slug":"recommendation","link":"#recommendation","children":[]},{"level":3,"title":"다른 선택지","slug":"other-options","link":"#other-options","children":[]}]},{"level":2,"title":"컴포넌트 테스트","slug":"component-testing","link":"#component-testing","children":[{"level":3,"title":"추천","slug":"recommendation-1","link":"#recommendation-1","children":[]},{"level":3,"title":"마운팅 라이브러리","slug":"mounting-libraries","link":"#mounting-libraries","children":[]},{"level":3,"title":"다른 선택지","slug":"other-options-1","link":"#other-options-1","children":[]}]},{"level":2,"title":"E2E 테스트","slug":"e2e-testing","link":"#e2e-testing","children":[{"level":3,"title":"E2E 테스트 솔루션 선택","slug":"choosing-an-e2e-testing-solution","link":"#choosing-an-e2e-testing-solution","children":[]},{"level":3,"title":"추천","slug":"recommendation-2","link":"#recommendation-2","children":[]},{"level":3,"title":"다른 선택지","slug":"other-options-2","link":"#other-options-2","children":[]}]},{"level":2,"title":"레시피","slug":"recipes","link":"#recipes","children":[{"level":3,"title":"프로젝트에 Vitest 추가","slug":"adding-vitest-to-a-project","link":"#adding-vitest-to-a-project","children":[]},{"level":3,"title":"컴포저블 테스트","slug":"testing-composables","link":"#testing-composables","children":[]}]}],"relativePath":"guide/scaling-up/testing.md"}'),k=Object.assign({name:"guide/scaling-up/testing.md"},{setup:s=>(s,n)=>(l(),a("div",null,[g,i(u,null,{default:F((()=>[m,f,b])),_:1}),v]))});export{E as __pageData,k as default};
