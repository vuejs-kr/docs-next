import{_ as s,o as n,c as a,a as l}from"./app.ea8bebef.js";const p='{"title":"컴포넌트 인스턴스","description":"","frontmatter":{},"headers":[{"level":2,"title":"$data","slug":"data"},{"level":2,"title":"$props","slug":"props"},{"level":2,"title":"$el","slug":"el"},{"level":2,"title":"$options","slug":"options"},{"level":2,"title":"$parent","slug":"parent"},{"level":2,"title":"$root","slug":"root"},{"level":2,"title":"$slots","slug":"slots"},{"level":2,"title":"$refs","slug":"refs"},{"level":2,"title":"$attrs","slug":"attrs"},{"level":2,"title":"$watch()","slug":"watch"},{"level":2,"title":"$emit()","slug":"emit"},{"level":2,"title":"$forceUpdate()","slug":"forceupdate"},{"level":2,"title":"$nextTick()","slug":"nexttick"}],"relativePath":"api/component-instance.md"}',o={},e=[l('<h1 id="component-instance" tabindex="-1">컴포넌트 인스턴스 <a class="header-anchor" href="#component-instance" aria-hidden="true">#</a></h1><div class="info custom-block"><p class="custom-block-title">INFO</p><p>이 페이지는 컴포넌트의 공개적인(public) 인스턴스인 <code>this</code>에 노출되는 빌트인 속성 및 메서드에 관한 문서입니다.</p><p>이 페이지에 나열된 모든 속성은 읽기 전용입니다(<code>$data</code>의 중첩 속성 제외).</p></div><h2 id="data" tabindex="-1">$data <a class="header-anchor" href="#data" aria-hidden="true">#</a></h2><p><a href="./options-state.html#data"><code>data</code></a> 옵션에서 반환된 객체로 컴포넌트에 의해 반응형이 됩니다. 컴포넌트 인스턴스는 데이터 객체의 속성 접근을 프락시합니다. 예를들면, 컴포넌트 인스턴스는 데이터 객체의 속성 <code>this.$data.a</code>를 <code>this.a</code>와 같이 바로 접근할 수 있도록 합니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li></ul><h2 id="props" tabindex="-1">$props <a class="header-anchor" href="#props" aria-hidden="true">#</a></h2><p>현재 컴포넌트의 처리(선언, 할당 및 초기화)된 props를 나타내는 객체입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$props</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><a href="./options-state.html#props"><code>props</code></a> 옵션을 통해 선언된 props만 포함됩니다. 컴포넌트 인스턴스는 props 객체의 속성 접근을 프락시합니다.</p></li></ul><h2 id="el" tabindex="-1">$el <a class="header-anchor" href="#el" aria-hidden="true">#</a></h2><p>컴포넌트 인스턴스가 관리하는 루트 DOM 노드입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$el</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Node</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">undefined</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><code>$el</code>은 <a href="./options-lifecycle.html#mounted">mounted</a>될 때까지 <code>undefined</code>입니다.</p><ul><li>싱글 루트 엘리먼트가 있는 컴포넌트의 경우, <code>$el</code>은 해당 엘리먼트를 가리킵니다.</li><li>텍스트 루트가 있는 컴포넌트의 경우, <code>$el</code>은 텍스트 노드를 가리킵니다.</li><li>여러 루트 노드가 있는 컴포넌트의 경우, <code>$el</code>은 Vue가 DOM(텍스트 노드 또는 SSR 하이드레이션 모드의 주석 노드)에서 컴포넌트의 위치를 추적하는 데 사용하는 플레이스홀더(placeholder) DOM 노드입니다.</li></ul><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>엘리먼트에 일관적으로 접근해야 할 때, <code>$el</code>보다 <a href="/guide/essentials/template-refs.html">템플릿 참조</a>를 사용하는 것이 권장됩니다.</p></div></li></ul><h2 id="options" tabindex="-1">$options <a class="header-anchor" href="#options" aria-hidden="true">#</a></h2><p>현재 컴포넌트 인스턴스를 인스턴스화하는 데 사용된, 처리된 컴포넌트 옵션입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$options</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentOptions</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><code>$options</code> 객체는 현재 컴포넌트의 처리된 옵션을 노출하며, 이것은 아래와 같은 소스의 병합 결과입니다:</p><ul><li>전역 믹스인</li><li><code>extends</code> 기반의 컴포넌트</li><li>컴포넌트 믹스인</li></ul><p>일반적으로 커스텀 컴포넌트 옵션을 지원하는 데 사용됩니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> app </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createApp</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">customOption</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">$options</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">customOption</span><span style="color:#F07178;">) </span><span style="color:#676E95;font-style:italic;">// =&gt; &#39;foo&#39;</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>참고</strong>: <a href="/api/application.html#app-config-optionmergestrategies"><code>app.config.optionMergeStrategies</code></a></p></li></ul><h2 id="parent" tabindex="-1">$parent <a class="header-anchor" href="#parent" aria-hidden="true">#</a></h2><p>현재 인스턴스에 부모 인스턴스가 있는 경우, 부모 인스턴스를 나타냅니다. 현재 인스턴스가 루트 인스턴스일 경우에는 <code>null</code>이 됩니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$parent</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li></ul><h2 id="root" tabindex="-1">$root <a class="header-anchor" href="#root" aria-hidden="true">#</a></h2><p>현재 컴포넌트 트리의 루트 컴포넌트 인스턴스입니다. 현재 인스턴스에 부모가 없으면, 값은 현재 인스턴스 자체가 됩니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$root</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li></ul><h2 id="slots" tabindex="-1">$slots <a class="header-anchor" href="#slots" aria-hidden="true">#</a></h2><p>부모 컴포넌트로부터 전달된 <a href="/guide/components/slots.html">slots</a>을 나타내는 객체입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$slots</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Slot</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">VNode</span><span style="color:#A6ACCD;">[]</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p>일반적으로 <a href="/guide/extras/render-function.html">렌더 함수</a>를 수동으로 작성할 때 사용되지만, 슬롯 유무 확인에도 사용할 수 있습니다.</p><p><code>this.$slots</code>는 각 슬롯의 이름에 해당하는 함수가 노출되며, vnode(가상노드)로 구성된 배열을 반환합니다. 기본 슬롯은 <code>this.$slots.default</code>로 표시됩니다.</p><p>슬롯이 <a href="/guide/components/slots.html#scoped-slots">범위가 지정된 슬롯</a>이면, 슬롯 함수에 전달된 인자를 슬롯 prop으로 사용할 수 있습니다.</p></li><li><p><strong>참고</strong>: <a href="/guide/extras/render-function.html#rendering-slots">Render Functions - Rendering Slots</a></p></li></ul><h2 id="refs" tabindex="-1">$refs <a class="header-anchor" href="#refs" aria-hidden="true">#</a></h2><p><a href="/guide/essentials/template-refs.html">템플릿 참조</a>를 통해 등록된, DOM 엘리먼트 및 컴포넌트 인스턴스 객체입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$refs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> [name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Element</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">null</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>참고</strong>:</p><ul><li><a href="/guide/essentials/template-refs.html">가이드 - 템플릿 참조</a></li><li><a href="./built-in-special-attributes.html#ref">특수 속성 - ref</a></li></ul></li></ul><h2 id="attrs" tabindex="-1">$attrs <a class="header-anchor" href="#attrs" aria-hidden="true">#</a></h2><p>컴포넌트의 폴스루 속성이 포함된 객체입니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$attrs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">object</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p><a href="/guide/components/attrs.html">폴스루 속성</a>은 부모 컴포넌트에서 전달한 속성 및 이벤트 핸들러이지만, 자식의 prop 또는 내보낼(emit) 이벤트로 선언하지 않습니다.</p><p>기본적으로 <code>$attrs</code>의 모든 항목은 싱글 루트 엘리먼트만 있는 경우, 컴포넌트의 루트 엘리먼트로 자동 상속됩니다. <a href="./options-misc.html#inheritattrs"><code>inheritAttrs</code></a> 옵션을 사용하여 명시적으로 비활성화할 수 있으며, 컴포넌트에 여러 루트 노드가 있는 경우에도 비활성화 됩니다.</p></li><li><p><strong>참고</strong>:</p><ul><li><a href="/guide/components/attrs.html">가이드 - 폴스루 속성</a></li></ul></li></ul><h2 id="watch" tabindex="-1">$watch() <a class="header-anchor" href="#watch" aria-hidden="true">#</a></h2><p>감시자를 생성하기 위한 명령형 API.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$watch</span><span style="color:#89DDFF;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">    source</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    callback</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">    options</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchCallback</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> (</span></span>\n<span class="line"><span style="color:#A6ACCD;">  value</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  oldValue</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">T</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">onCleanup</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">cleanupFn</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">) </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">WatchOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 기본 값: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">boolean</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 기본 값: false</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">pre</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 기본 값: &#39;pre&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrack</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">onTrigger</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">DebuggerEvent</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">StopHandle</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>: 첫 번째 인자는 감시할 소스입니다. 컴포넌트 속성명 문자열, 점으로 구분된 간단한 경로 문자열 또는 getter 함수일 수 있습니다.</p><p>두 번째 인자는 콜백 함수입니다. 콜백은 감시된 소스의 새 값과 이전 값을 인자로 받습니다.</p><ul><li><strong><code>immediate</code></strong>: 감시자가 생성되는 즉시 콜백이 호출됩니다. 최초 호출 시, 이전 값은 <code>undefined</code>입니다.</li><li><strong><code>deep</code></strong>: 소스가 객체인 경우, 깊은 변경사항에서도 콜백이 실행되도록 합니다. 참고: <a href="/guide/essentials/watchers.html#deep-watchers">깊은 감시자</a>.</li><li><strong><code>flush</code></strong>: 콜백의 발생(flush) 타이밍을 조정합니다. 참고: <a href="/guide/essentials/watchers.html#callback-flush-timing">콜백 실행 타이밍</a>.</li><li><strong><code>onTrack / onTrigger</code></strong>: 감시자의 의존성을 디버그합니다. 참고: <a href="/guide/extras/reactivity-in-depth.html#watcher-debugging">감시자 디버깅</a>.</li></ul></li><li><p><strong>예제</strong>:</p><p>속성명으로 감시:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>점 구분자로 경로를 감시:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a.b</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>복합적인 추적이 필요할 경우 getter 사용:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// `this.a + this.b` 표현식이 다른 결과를</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 생성할 때마다 핸들러가 호출됩니다.</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 계산된 속성을 정의하지 않고</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 계산된 속성을 감시하고 있는 것과 같습니다.</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">a </span><span style="color:#89DDFF;">+</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">b</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newVal</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>감시자 중지(해제):</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">a</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> cb)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 더 이상 &#39;a&#39;를 감시하지 않음</span></span>\n<span class="line"><span style="color:#82AAFF;">unwatch</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>참고</strong>:</p><ul><li><a href="/api/options-state.html#watch">옵션 - <code>watch</code></a></li><li><a href="/guide/essentials/watchers.html">가이드 - 감시자</a></li></ul></li></ul><h2 id="emit" tabindex="-1">$emit() <a class="header-anchor" href="#emit" aria-hidden="true">#</a></h2><p>현재 인스턴스에서 커스텀 이벤트를 트리거합니다. 추가적인 인자는 리스너의 콜백 함수로 전달됩니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$emit</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">event</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">args</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">any</span><span style="color:#A6ACCD;">[]</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>예제</strong>:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 커스텀 이벤트 &#39;foo&#39;만 트리거</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 추가 인자와 함께 트리거</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$emit</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">2</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">3</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>참고</strong>:</p><ul><li><a href="/guide/components/events.html">가이드 - 컴포넌트 이벤트</a></li><li><a href="./options-state.html#emits">옵션 - <code>emits</code></a></li></ul></li></ul><h2 id="forceupdate" tabindex="-1">$forceUpdate() <a class="header-anchor" href="#forceupdate" aria-hidden="true">#</a></h2><p>컴포넌트 인스턴스를 강제로 다시 렌더링합니다.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$forceUpdate</span><span style="color:#89DDFF;">():</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p>Vue의 전반적인 자동 반응형 시스템을 고려할 때, 이것은 거의 필요하지 않습니다. 필요할 수 있는 유일한 경우는 고급 반응형 API를 사용하여, 비반응형 컴포넌트 상태를 명시적으로 생성하는 경우입니다.</p></li></ul><h2 id="nexttick" tabindex="-1">$nextTick() <a class="header-anchor" href="#nexttick" aria-hidden="true">#</a></h2><p>전역 <a href="./general.html#nexttick"><code>nextTick()</code></a>가 인스턴스에 바인딩된 버전.</p><ul><li><p><strong>타입</strong>:</p><div class="language-ts"><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">$nextTick</span><span style="color:#89DDFF;">(</span><span style="color:#82AAFF;">callback</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(this:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ComponentPublicInstance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">):</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">void</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></li><li><p><strong>세부 사항</strong>:</p><p>전역 <code>nextTick()</code>과의 유일한 차이점은 <code>this.$nextTick()</code>에 전달된 콜백이 현재 컴포넌트 인스턴스에 바인딩된 <code>this</code> 컨텍스트를 갖는다는 것입니다.</p></li><li><p><strong>참고</strong>: <a href="./general.html#nexttick"><code>nextTick()</code></a></p></li></ul>',41)];var t=s(o,[["render",function(s,l,p,o,t,c){return n(),a("div",null,e)}]]);export{p as __pageData,t as default};
