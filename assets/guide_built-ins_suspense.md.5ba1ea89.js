import{_ as s,o as n,c as a,a as e}from"./app.4f365495.js";const l=JSON.parse('{"title":"Suspense","description":"","frontmatter":{"outline":"deep"},"headers":[{"level":2,"title":"비동기 의존성","slug":"async-dependencies","link":"#async-dependencies","children":[{"level":3,"title":"비동기 setup()","slug":"async-setup","link":"#async-setup","children":[]},{"level":3,"title":"비동기 컴포넌트","slug":"async-components","link":"#async-components","children":[]}]},{"level":2,"title":"로딩 상태","slug":"loading-state","link":"#loading-state","children":[]},{"level":2,"title":"이벤트","slug":"events","link":"#events","children":[]},{"level":2,"title":"에러 처리","slug":"error-handling","link":"#error-handling","children":[]},{"level":2,"title":"다른 컴포넌트와 결합","slug":"combining-with-other-components","link":"#combining-with-other-components","children":[]}],"relativePath":"guide/built-ins/suspense.md"}'),p={name:"guide/built-ins/suspense.md"},o=[e('<h1 id="suspense" tabindex="-1">Suspense <a class="header-anchor" href="#suspense" aria-hidden="true">#</a></h1><div class="warning custom-block"><p class="custom-block-title">실험적인 기능</p><p><code>&lt;Suspense&gt;</code> 는 실험적인 기능입니다. 아직 개발이 완료된 안정된 상태가 아니며 추후 AP가 변경 될 수 있습니다.</p></div><p><code>&lt;Suspense&gt;</code> 는 컴포넌트 트리에서 비동기 의존성을 조정하기 위한 내장 컴포넌트입니다. 컴포넌트 트리 아래에 여러개의 중첩된 비동기 의존성이 해결될 때까지 기다리는 동안 로드 상태를 렌더링할 수 있습니다.</p><h2 id="async-dependencies" tabindex="-1">비동기 의존성 <a class="header-anchor" href="#async-dependencies" aria-hidden="true">#</a></h2><p><code>&lt;Suspense&gt;</code> 가 해결하려는 문제와 비동기 의존성이 상호 작용하는 방식을 설명하기 위해 다음과 같은 컴포넌트 계층 구조그려보겠습니다.</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">&lt;Suspense&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">└─ &lt;Dashboard&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">   ├─ &lt;Profile&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">   │  └─ &lt;FriendStatus&gt; (비동기 setup()과 컴포넌트)</span></span>\n<span class="line"><span style="color:#A6ACCD;">   └─ &lt;Content&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      ├─ &lt;ActivityFeed&gt; (비동기 컴포넌트)</span></span>\n<span class="line"><span style="color:#A6ACCD;">      └─ &lt;Stats&gt; (비동기 컴포넌트)</span></span>\n<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>컴포넌트 트리에는 확인할 비동기 리소스에 따라 렌더링이 달라지는 여러 중첩 컴포넌트가 있습니다. <code>&lt;Suspense&gt;</code> 가 없으면 각각 로딩/에러 및 로딩 상태를 처리해야 합니다. 최악의 시나리오에서는 페이지에 3개의 로딩 스피너가 표시되고 컨텐츠가 다른 시간에 표시될 수 있습니다.</p><p><code>&lt;Suspense&gt;</code> 컴포넌트는 이러한 중첩된 비동기 의존성이 해결될 때까지 최상위에서 로드/에러 상태를 표시할 수 있는 기능을 제공합니다.</p><p><code>&lt;Suspense&gt;</code> 가 기다릴 수 있는 두 가지 유형의 비동기 의존성이 있습니다.</p><ol><li><p>비동기 <code>setup()</code> 훅이 있는 컴포넌트. 여기에는 최상위 <code>await</code> 표현식과 함께 <code>&lt;script setup&gt;</code> 을 사용하는 컴포넌트가 포함됩니다.</p></li><li><p><a href="/guide/components/async.html">비동기 컴포넌트</a>.</p></li></ol><h3 id="async-setup" tabindex="-1"><code>비동기 setup()</code> <a class="header-anchor" href="#async-setup" aria-hidden="true">#</a></h3><p>컴포지션 API 컴포넌트의 <code>setup()</code> 훅은 비동기일 수 있습니다.</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">setup</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">...</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">posts</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#A6ACCD;">posts</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p><code>&lt;script setup&gt;</code> 을 사용하는 경우 최상위 <code>await</code> 표현식이 있으면 컴포넌트가 자동으로 비동기 의존성을 갖게 됩니다.</p><div class="language-vue"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> res </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">...</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> posts </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  {{ posts }}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><h3 id="async-components" tabindex="-1">비동기 컴포넌트 <a class="header-anchor" href="#async-components" aria-hidden="true">#</a></h3><p>비동기 컴포넌트는 기본적으로 <strong>중단</strong> 가능합니다. 즉, 상위 체인에 <code>&lt;Suspense&gt;</code> 가 있는 경우 해당 <code>&lt;Suspense&gt;</code> 의 비동기 의존성으로 처리됩니다. 이 경우 로딩 상태는 <code>&lt;Suspense&gt;</code> 에 의해 제어되며 컴포넌트 자체의 로딩, 에러, 지연 및 시간 초과 옵션은 무시됩니다.</p><p>비동기 컴포넌트는 <code>Suspense</code> 제어를 선택 해제하고 컴포넌트 옵션에서 <code>suspensible: false</code> 를 지정하여 항상 자체 로딩 상태를 제어하도록 할 수 있습니다.</p><h2 id="loading-state" tabindex="-1">로딩 상태 <a class="header-anchor" href="#loading-state" aria-hidden="true">#</a></h2><p><code>&lt;Suspense&gt;</code> 컴포넌트에는 <code>#default</code> 와 <code>#fallback</code> 이라는 두 개의 슬롯이 있습니다. 두 슬롯 모두 <strong>하나</strong> 의 직계 자식 노드만 허용합니다. 가능한 경우 기본 슬롯의 노드가 표시됩니다. 그렇지 않은 경우 대체 슬롯의 노드가 대신 표시됩니다.</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- 컴포넌트와 중첩된 비동기 의존성 --&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Dashboard</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">&lt;!-- #fallback 슬롯을 통한 로딩 상태 --&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    로딩중...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>초기 렌더링 시 <code>&lt;Suspense&gt;</code> 는 기본 슬롯 컨텐츠를 메모리에 렌더링합니다. 프로세스 중에 비동기 의존성이 발생하면 <strong>pending</strong> 상태가 됩니다. pending 상태 동안 대체 컨텐츠가 표시됩니다. 발생한 모든 비동기 의존성이 해결되면 <code>&lt;Suspense&gt;</code> 가 <strong>resolve</strong> 된 상태로 들어가고 resolved된 기본 슬롯 컨텐츠가 표시됩니다.</p><p>초기 렌더링 중에 비동기 의존성이 발생하지 않은 경우 <code>&lt;Suspense&gt;</code> 는 직접 resolved된 상태가 됩니다.</p><p>resolved 상태에서 <code>&lt;Suspense&gt;</code> 는 <code>#default</code> 슬롯의 루트 노드가 교체되는 경우에만 pending 상태로 되돌아갑니다. 트리 내부의 중첩된 새로운 비동기 의존성으로 인해 <code>&lt;Suspense&gt;</code> 가 pending 상태로 <strong>되돌아가지 않습니다</strong> .</p><p>되돌리기가 발생하면 대체 컨텐츠가 즉시 표시되지 않습니다. 대신 <code>&lt;Suspense&gt;</code> 는 새 컨텐츠와 해당 비동기 의존성이 해결될 때까지 기다리는 동안 이전 <code>#default</code> 컨텐츠를 표시합니다. 이 동작은 <code>timeout</code> prop으로 구성할 수 있습니다. 새로운 기본 컨텐츠를 렌더링하는 데 <code>timeout</code> 보다 오래 걸리는 경우 <code>&lt;Suspense&gt;</code> 가 대체 컨텐츠로 전환됩니다. <code>timeout</code> 값이 <code>0</code> 이면 기본 컨텐츠가 교체될 때 대체 컨텐츠가 즉시 표시됩니다.</p><h2 id="events" tabindex="-1">이벤트 <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p><code>&lt;Suspense&gt;</code> 컴포넌트는 3가지 이벤트를 내보냅니다: <code>pending</code> , <code>resolve</code> 및 <code>fallback</code> 입니다. <code>pending</code> 이벤트는 보류 상태에 들어갈 때 발생합니다. <code>resolve</code> 이벤트는 새 컨텐츠가 <code>default</code> 슬롯에서 해결되면 발생합니다. <code>fallback</code> 슬롯의 컨텐츠가 표시될 때 <code>fallback</code> 이벤트가 시작됩니다.</p><p>예를 들어 이벤트를 사용하여 새로운 컴포넌트가 로드되는 동안 이전 DOM 앞에 로딩을 표시할 수 있습니다.</p><h2 id="error-handling" tabindex="-1">에러 처리 <a class="header-anchor" href="#error-handling" aria-hidden="true">#</a></h2><p><code>&lt;Suspense&gt;</code> 는 현재 컴포넌트 자체를 통해 에러를 처리하지 않습니다. 그러나 <a href="/api/options-lifecycle.html#errorcaptured"><code>errorCaptured</code></a> 옵션 또는 <a href="/api/composition-api-lifecycle.html#onerrorcaptured"><code>onErrorCaptured()</code></a> 훅을 사용하여 <code>&lt;Suspense&gt;</code> 의 부모 컴포넌트에서 비동기 에러를 캡처하고 처리할 수 있습니다.</p><h2 id="combining-with-other-components" tabindex="-1">다른 컴포넌트와 결합 <a class="header-anchor" href="#combining-with-other-components" aria-hidden="true">#</a></h2><p><a href="./transition.html"><code>&lt;Transition&gt;</code></a> 및 <a href="./keep-alive.html"><code>&lt;KeepAlive&gt;</code></a> 컴포넌트와 함께 <code>&lt;Suspense&gt;</code> 를 사용하려는 경우가 일반적입니다. 이러한 컴포넌트의 중첩 순서는 모든 컴포넌트가 올바르게 작동하도록 하는 것에 큰 영향을 줍니다.</p><p>또한 이러한 컴포넌트는 <a href="https://router.vuejs.kr/" target="_blank" rel="noreferrer">Vue Router</a> 의 <code>&lt;RouterView&gt;</code> 컴포넌트와 함께 사용되는 경우가 많습니다.</p><p>다음 예제에서는 이러한 컴포넌트가 모두 예상한 대로 작동하도록 중첩시키는 방법을 보여줍니다. 더 간단하게 할 경우 필요하지 않은 컴포넌트를 제거할 수 있습니다.</p><div class="language-template"><button title="Copy Code" class="copy"></button><span class="lang">template</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">RouterView</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-slot</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">{ </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;"> }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-if</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">mode</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">out-in</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">&lt;!-- 메인 컨텐츠 --&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;"> :</span><span style="color:#C792EA;">is</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">component</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#676E95;font-style:italic;">&lt;!-- 로딩 상태 --&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;"> #</span><span style="color:#C792EA;">fallback</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">            로딩중...</span></span>\n<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Suspense</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">KeepAlive</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">Transition</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#FFCB6B;">RouterView</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>Vue 라우터에는 동적 import를 사용하여 <a href="https://router.vuejs.kr/guide/advanced/lazy-loading.html" target="_blank" rel="noreferrer">컴포넌트를 lazy load하는</a> 기능이 내장되어 있습니다. 이들은 비동기 컴포넌트와 구분되며 현재 <code>&lt;Suspense&gt;</code> 를 트리거하지 않습니다. 그러나 여전히 비동기 컴포넌트를 하위 항목으로 가질 수 있으며 일반적인 방식으로 <code>&lt;Suspense&gt;</code> 를 트리거할 수 있습니다.</p>',36)];const t=s(p,[["render",function(s,e,l,p,t,c){return n(),a("div",null,o)}]]);export{l as __pageData,t as default};
