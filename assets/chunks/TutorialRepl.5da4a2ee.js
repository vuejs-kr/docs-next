import{R as s,o as n,a,r as o,b as l}from"./utils.ab43c31b.js";import{g as p,aa as e,r as t,h as c,Y as r,o as i,c as d,e as y,j as D,ah as F,w as C,F as u,n as A,i as h,d as m,t as g,X as v,u as f,k as b,ai as x,l as j,a4 as k,aj as E,ak as T,ac as w,_ as q}from"../app.64b8c0f0.js";const _=JSON.parse('{"step-1":{"App":{"template.html":"<h1>안녕 Vue!</h1>\\n"},"description.md":"<h1 id=\\"getting-started\\" tabindex=\\"-1\\">시작하기 <a class=\\"header-anchor\\" href=\\"#getting-started\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Vue 튜토리얼에 온 것을 환영합니다.</p>\\n<p>이 튜토리얼의 목표는 브라우저에서 빠르고 쉽게 Vue 사용 경험을 제공하는 것입니다.\\n포괄적인 것을 목표로 하지 않으므로 계속 진행하기 전에 모든 것을 이해할 필요가 없습니다.\\n그러나 완료한 후에는 각 주제에 대해 자세히 설명하는 <a target=\\"_blank\\" href=\\"/guide/introduction.html\\">가이드</a>를 읽어봅시다.</p>\\n<h2 id=\\"prerequisites\\" tabindex=\\"-1\\">전제 조건 <a class=\\"header-anchor\\" href=\\"#prerequisites\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>이 튜토리얼에서는 HTML, CSS 및 JavaScript에 대한 기본적인 지식이 있다고 가정합니다.\\n프론트엔드 개발을 처음하는 경우, 첫 번째 단계로 프레임워크로 바로 뛰어드는 것이 좋은 생각이 아닐 수 있습니다.\\n기초를 갖춘 다음 다시 돌아오세요!\\n다른 프레임워크를 사용해본 경험이 도움이 될 수 있지만 필수는 아닙니다.</p>\\n<h2 id=\\"how-to-use-this-tutorial\\" tabindex=\\"-1\\">이 튜토리얼을 사용하는 방법 <a class=\\"header-anchor\\" href=\\"#how-to-use-this-tutorial\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>오른쪽에서 코드를 편집하고 즉시 업데이트된 결과물을 볼 수 있습니다.\\n각 단계는 Vue의 핵심 기능을 소개하며, 데모가 작동하도록 코드를 완성해야 합니다.\\n막히면 작동하는 코드를 보여주는 &quot;보여줘!&quot; 버튼이 표시됩니다.\\n하지만 그것에 너무 의존하지 맙시다.\\n스스로 알아내면 더 빨리 배울 수 있습니다.</p>\\n<p>Vue 2 또는 다른 프레임워크에서 온 숙련된 개발자라면 이 튜토리얼을 최대한 활용하기 위해 조정할 수 있는 몇 가지 설정이 있습니다.\\n초보자라면 기본값을 사용하는 것이 좋습니다.</p>\\n<details>\\n<summary>튜토리얼 설정 세부 사항</summary>\\n<ul>\\n<li>\\n<p>Vue는 옵션 API와 컴포지션 API의 두 가지 API 스타일을 제공합니다.\\n이 튜토리얼은 두 스타일 모두에서 작동하도록 설계되었습니다.\\n상단의 API 스타일 설정 스위치를 사용하여 원하는 스타일을 선택할 수 있습니다.\\n<a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">API 스타일에 대해 자세히 알아보기</a></p>\\n</li>\\n<li>\\n<p>SFC 또는 HTML 모드로 전환할 수도 있습니다.\\n전자는 대부분의 개발자가 빌드 과정에서 Vue를 사용할 때 사용하는 <a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">싱글 파일 컴포넌트</a>(SFC) 형식의 코드 예제를 보여줍니다.\\nHTML 모드는 빌드 과정 없이 사용법을 보여줍니다.</p>\\n</li>\\n</ul>\\n</details>\\n<p>준비 됬나요?\\n&quot;다음&quot;을 클릭하여 시작합시다.</p>\\n"},"step-10":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  }\\n}\\n","template.html":"<p>할 일 id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">다음 할 일 가져오기</button>\\n<p v-if=\\"!todoData\\">로딩...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"_hint":{"App":{"composition.js":"import { ref, watch } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    watch(todoId, fetchData)\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  },\\n  watch: {\\n    todoId() {\\n      this.fetchData()\\n    }\\n  }\\n}\\n","template.html":"<p>할 일 id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">다음 할 일 가져오기</button>\\n<p v-if=\\"!todoData\\">로딩...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"description.md":{}},"description.md":"<h1 id=\\"watchers\\" tabindex=\\"-1\\">감시자 <a class=\\"header-anchor\\" href=\\"#watchers\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>때때로 우리는 반응형 &quot;사이드 이펙트&quot;를 수행해야 합니다.\\n예를 들어 숫자가 변경될 때, 콘솔에 숫자를 기록하는 것입니다.\\n우리는 <code>watch</code>(감시자)로 이러한 목적을 구현할 수 있습니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">watch</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">watch</span><span style=\\"color: #A6ACCD\\">(count</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 예, console.log()는 사이드 이펙트입니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">새로 센 숫자 값은: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>watch()</code>는 <code>ref</code>를 직접 감시할 수 있으므로, <code>count</code>의 값이 변경될 때마다 콜백이 실행됩니다.\\n<code>watch()</code>는 다른 타입의 데이터 소스도 볼 수 있습니다.\\n자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">가이드 - 감시자</a>에서 다룹니다.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">watch</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 예, console.log()는 사이드 이펙트입니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">새로 센 숫자 값은: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>여기에서는 <code>count</code> 속성의 변경 사항을 감시하기 위해 <code>watch</code> 옵션을 사용하고 있습니다.\\n<code>watch</code> 콜백은 <code>count</code>가 변경될 때 호출되고 새 값을 인자로 받습니다.\\n자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">가이드 - 감시자</a>에서 다룹니다.</p>\\n</div>\\n<p>콘솔에 로그인하는 것보다 ID가 변경될 때 새 데이터를 가져오는 것이 더 실용적입니다.\\n우리는 컴포넌트가 마운트 될 때, API에서 할 일 데이터를 가지고 오는 코드를 가지고 있습니다.\\n할 일을 가져오기 위해 ID를 증가시키는 버튼도 있습니다.\\n버튼을 클릭할 때, 다음 할 일을 가져오는 감시자를 구현해 봅시다.</p>\\n"},"step-11":{"App":{"composition.js":"export default {\\n  // 자식 컴포넌트를 등록\\n}\\n","options.js":"export default {\\n  // 자식 컴포넌트를 등록\\n}\\n","template.html":"\x3c!-- 자식 컴포넌트 렌더링 --\x3e\\n"},"ChildComp":{"template.html":"<h2>자식 컴포넌트입니다!</h2>\\n"},"_hint":{"App":{"composition.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"template.html":"<h2>자식 컴포넌트입니다!</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"components\\" tabindex=\\"-1\\">컴포넌트 <a class=\\"header-anchor\\" href=\\"#components\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>지금까지 우리는 단일 컴포넌트로만 작업했습니다.\\n일반적으로 실제 Vue 앱은 중첩된 컴포넌트를 사용하여 생성됩니다.</p>\\n<p>상위 컴포넌트는 다른 컴포넌트를 템플릿의 하위 컴포넌트로 렌더링할 수 있습니다.\\n자식 컴포넌트를 사용하려면 먼저 가져와야 합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>그런 다음 <code>components</code> 옵션을 사용하여 컴포넌트를 등록해야 합니다.\\n여기서는 <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\\" target=\\"_blank\\" rel=\\"noreferrer\\">객체 축약형 속성명</a> 문법을 사용하여 <code>ChildComp</code>로 컴포넌트를 등록했습니다.</p>\\n</div>\\n</div>\\n<div class=\\"sfc\\">\\n<p>그런 다음 템플릿에서 컴포넌트를 다음과 같이 사용할 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.js</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>그런 다음 <code>components</code> 옵션을 사용하여 컴포넌트를 등록해야 합니다.\\n여기서는 <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer#property_definitions\\" target=\\"_blank\\" rel=\\"noreferrer\\">객체 축약형 속성명</a> 문법을 사용하여 <code>ChildComp</code>로 컴포넌트를 등록했습니다.</p>\\n<p>DOM에 템플릿을 작성하므로 태그의 대소문자를 구분하지 않는 브라우저 문법 분석 규칙이 적용됩니다.\\n따라서 하위 컴포넌트를 참조하려면 케밥 케이스(kebab-cased) 이름을 사용해야 합니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>이제 직접 템플릿에서 하위 컴포넌트를 가져와 렌더링해봅시다.</p>\\n"},"step-12":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'부모 컴포넌트로부터 💌을 전달받았어요!\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'부모 컴포넌트로부터 💌을 전달받았어요!\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'prop이 아직 전달되지 않았습니다!\' }}</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp :msg=\\"greeting\\" />\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'부모 컴포넌트로부터 💌을 전달받았어요!\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'부모 컴포넌트로부터 💌을 전달받았어요!\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'prop이 아직 전달되지 않았습니다!\' }}</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"props\\" tabindex=\\"-1\\">Props <a class=\\"header-anchor\\" href=\\"#props\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>자식 컴포넌트는 <strong>props</strong>를 통해 부모로부터 데이터를 받을 수 있습니다.\\n우선, 허용할 props를 선언해야 합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- ChildComp.vue --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> props </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineProps</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>참고로 <code>defineProps()</code>는 컴파일 타임 매크로이므로 <code>import</code> 할 필요가 없습니다.\\n일단 선언되면 <code>msg</code> prop은 자식 컴포넌트 템플릿에서 사용할 수 있습니다.\\n또한 <code>defineProps()</code>에서 반환된 객체는 JavaScript에서 접근할 수 있습니다.</p>\\n</div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 자식 컴포넌트에서</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">props</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// props.msg에 접근 가능</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>일단 선언되면 <code>msg</code> prop이 <code>this</code>에 노출되고,\\n자식 컴포넌트의 템플릿에서 사용할 수 있습니다.\\n전달 받은 props는 <code>setup()</code>에 첫 번째 인자로 전달됩니다.</p>\\n</div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 자식 컴포넌트에서</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>일단 선언되면 <code>msg</code> prop이 <code>this</code>에 노출되고,\\n자식 컴포넌트의 템플릿에서 사용할 수 있습니다.</p>\\n</div>\\n<p>부모는 속성을 사용하는 것처럼 자식에게 prop을 전달할 수 있습니다.\\n동적 값을 전달하기 위해 <code>v-bind</code> 문법을 사용할 수도 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>이제 <code>greeting</code> 속성을 자식 컴포넌트에 <code>msg</code>라는 prop으로 전달해봅시다!</p>\\n"},"step-13":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'자식 컴포넌트로부터 아직 메시지를 받지 못했어요!\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'자식 컴포넌트로부터 아직 메시지를 받지 못했어요!\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n<p>{{ childMsg }}</p>\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'자식 컴포넌트로부터 🌷를 받았어요!\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'자식 컴포넌트로부터 🌷를 받았어요!\')\\n  }\\n}\\n","template.html":"<h2>자식 컴포넌트</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp @response=\\"(msg) => childMsg = msg\\" />\\n<p>{{ childMsg }}</p>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'자식 컴포넌트로부터 아직 메시지를 받지 못했어요!\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'자식 컴포넌트로부터 아직 메시지를 받지 못했어요!\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'자식 컴포넌트로부터 🌷를 받았어요!\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'자식 컴포넌트로부터 🌷를 받았어요!\')\\n  }\\n}\\n","template.html":"<h2>자식 컴포넌트</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"emits\\" tabindex=\\"-1\\">Emits <a class=\\"header-anchor\\" href=\\"#emits\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>자식 컴포넌트는 부모로부터 props를 받는 것 뿐만 아니라 이벤트를 emit(발송)할 수도 있습니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// emit할 이벤트 선언</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> emit </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineEmits</span><span style=\\"color: #A6ACCD\\">([</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 인자와 함께 emit</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">자식 컴포넌트로부터 🌷를 받았어요!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// emit할 이벤트 선언</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">props</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #A6ACCD; font-style: italic\\">emit</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">})</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 인자와 함께 emit</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">자식 컴포넌트로부터 🌷를 받았어요!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// emit할 이벤트 선언</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">created</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 인자와 함께 emit</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #82AAFF\\">$emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">자식 컴포넌트로부터 🌷를 받았어요!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p><span class=\\"options-api\\"><code>this.$emit()</code></span><span class=\\"composition-api\\"><code>emit()</code></span>의 첫 번째 인자는 이벤트 이름입니다.\\n이후 추가되는 모든 인자는 이벤트 리스너에 전달됩니다.</p>\\n<p>부모는 <code>v-on</code>을 사용하여 자식이 발송한 이벤트를 수신할 수 있습니다.\\n아래 예제 코드는 자식이 이벤트를 발송할 때 추가한 인자를 핸들러에서 받아 로컬 상태에 할당한 것입니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>자식 컴포넌트가 <code>response</code> 이벤트에 메시지 인자를 추가하여 발송하고 있습니다.\\n부모 컴포넌트에서 해당 이벤트를 수신하고,\\n메세지 인자를 <code>childMsg</code>에 적용해봅시다!</p>\\n"},"step-14":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'Vue는 개발자에게 정말 유용하죠! 🎁\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'Vue는 개발자에게 정말 유용하죠! 🎁\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp></ChildComp>\\n"},"ChildComp":{"template.html":"<slot>대체: 부모로부터 컨텐츠를 못 받았어요! 😢</slot>\\n"},"_hint":{"App":{"template.html":"<ChildComp>부모로부터: {{ msg }}</ChildComp>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'Vue는 개발자에게 정말 유용하죠! 🎁\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'Vue는 개발자에게 정말 유용하죠! 🎁\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"template.html":"<slot>대체: 부모로부터 컨텐츠를 못 받았어요! 😢</slot>\\n"},"description.md":{}},"description.md":"<h1 id=\\"slots\\" tabindex=\\"-1\\">슬롯 <a class=\\"header-anchor\\" href=\\"#slots\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>부모 컴포넌트는 자식에게 props를 사용하여 데이터를 전달하는 것 외에도, <strong>슬롯</strong>을 사용하여 템플릿 조각을 전달할 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  이것은 슬롯 컨텐츠입니다!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  이것은 슬롯 컨텐츠입니다!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>자식 컴포넌트가 <code>&lt;slot&gt;</code> 엘리먼트를 &quot;발산 수단(outlet: 가이드에서 \'아울렛\'으로 표기됨)&quot;으로 사용하면, 부모에게 전달 받은 슬롯 컨텐츠를 렌더링할 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- 자식 템플릿에서 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">/&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- 자식 템플릿에서 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p><code>&lt;slot&gt;</code> 아울렛 내부 컨텐츠는 &quot;대체&quot; 컨텐츠로 처리될 수 있는데, 부모가 슬롯 컨텐츠를 전달하지 않은 경우에 표시됩니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">대체: 부모로부터 컨텐츠를 못 받았어요! 😢</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>현재 우리는 슬롯 컨텐츠를 <code>&lt;ChildComp&gt;</code>에 전달하지 않았으므로, 대체 컨텐츠가 표시되고 있습니다.\\n부모의 <code>msg</code> 상태를 슬롯 컨텐츠로 하여 자식에게 전달해봅시다.</p>\\n"},"step-15":{"App":{"composition.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  setup() {\\n    function showConfetti() {\\n      confetti.addConfetti()\\n    }\\n\\n    showConfetti()\\n\\n    return {\\n      showConfetti\\n    }\\n  }\\n}\\n","options.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  mounted() {\\n    this.showConfetti()\\n  },\\n  methods: {\\n    showConfetti() {\\n      confetti.addConfetti()\\n    }\\n  }\\n}\\n","style.css":"h1 {\\n  text-align: center;\\n  cursor: pointer;\\n  margin-top: 3em;\\n}\\n","template.html":"<h1 @click=\\"showConfetti\\">🎉 축하합니다!</h1>\\n"},"description.md":"<h1 id=\\"you-did-it\\" tabindex=\\"-1\\">훌륭하게 해냈군요! <a class=\\"header-anchor\\" href=\\"#you-did-it\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>튜토리얼을 마쳤습니다!</p>\\n<p>이제 Vue를 어떻게 사용해야 하는지 잘 알게 되었을 것입니다.\\n하지만, 우리는 정말 빠르고 쉽게 많은 것을 다루기 위해, 세부적인 것은 생략했습니다.\\n더 확실하게 그리고 많은 것을 배우기 위해 다음을 생각해 볼 수 있습니다:</p>\\n<ul>\\n<li>\\n<p><a href=\\"/guide/quick-start.html\\">빠른 시작</a>의 안내에 따라 컴퓨터에 실제 Vue 프로젝트를 생성하기.</p>\\n</li>\\n<li>\\n<p>지금까지 배운 모든 주제를 더 자세히 다루는 <a href=\\"/guide/essentials/application.html\\">메인 가이드</a>를 살펴보기.</p>\\n</li>\\n<li>\\n<p>좀 더 실용적인 <a href=\\"/examples/\\">예제</a> 살펴보기.</p>\\n</li>\\n</ul>\\n<p>앞으로 Vue를 사용하여 어떤 멋진 것을 만들어낼지 너무 기대됩니다!</p>\\n","import-map.json":"{\\n  \\"imports\\": {\\n    \\"js-confetti\\": \\"https://cdn.jsdelivr.net/npm/js-confetti/+esm\\"\\n  }\\n}\\n"},"step-2":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 컴포넌트 로직\\n    // 여기에 반응형 상태를 선언합니다.\\n\\n    return {\\n      // 템플릿에 노출\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // 컴포넌트 옵션\\n  // 여기에 반응형 상태를 선언합니다.\\n}\\n","template.html":"<h1>나를 다이나믹하게 만들어주세요!</h1>\\n"},"_hint":{"App":{"composition.js":"import { reactive, ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const counter = reactive({ count: 0 })\\n    const message = ref(\'안녕 Vue!\')\\n\\n    return {\\n      counter,\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'안녕 Vue!\',\\n      counter: {\\n        count: 0\\n      }\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n<p>숫자 세기: {{ counter.count }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"declarative-rendering\\" tabindex=\\"-1\\">선언적 렌더링 <a class=\\"header-anchor\\" href=\\"#declarative-rendering\\" aria-hidden=\\"true\\">#</a></h1>\\n<div class=\\"sfc\\">\\n<p>편집기에 보이는 것은 Vue SFC(Single File Component)입니다.\\nSFC는 HTML, CSS, JavaScript를 캡슐화한 코드 블록으로 재사용 가능한 <code>.vue</code> 파일입니다.</p>\\n</div>\\n<p>Vue의 핵심 기능은 <strong>선언적 렌더링</strong>입니다.\\nHTML을 확장하는 템플릿 문법을 사용하여 JavaScript 상태를 기반으로 HTML이 어떻게 보이는지 설명할 수 있습니다.\\n상태가 변경되면 HTML이 자동으로 업데이트됩니다.</p>\\n<div class=\\"composition-api\\">\\n<p>변경 시, 업데이트를 트리거할 수 있는 상태는 <strong>반응형</strong>으로 간주됩니다.\\nVue의 <code>reactive()</code> API를 사용하여 반응형 상태를 선언할 수 있습니다.\\n<code>reactive()</code>로 생성된 객체는 일반 객체처럼 작동하는 JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noreferrer\\">프락시</a>입니다:</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">reactive</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> counter </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count) </span><span style=\\"color: #676E95; font-style: italic\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code>는 객체(배열, <code>Map</code>, <code>Set</code>과 같은 빌트인 타입 포함)에서만 작동합니다.\\n반면에 <code>ref()</code>는 모든 타입의 값을 사용할 수 있으며,\\n<code>.value</code> 속성으로 내부 값을 노출하는 객체를 생성합니다.</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value) </span><span style=\\"color: #676E95; font-style: italic\\">// &quot;안녕 Vue!&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">메세지 변경됨</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code> 및 <code>ref()</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">가이드 - 반응형 기초</a>에서 설명합니다.</p>\\n<div class=\\"sfc\\">\\n<p>컴포넌트의 <code>&lt;script setup&gt;</code> 블록에 선언된 반응형 상태는 템플릿에서 직접 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>counter</code> 객체와 <code>message</code> ref의 값을 동적으로 텍스트로 렌더링하는 방법입니다.</p>\\n</div>\\n<div class=\\"html\\">\\n<p><code>createApp()</code>에 전달되는 객체는 Vue 컴포넌트입니다.\\n컴포넌트의 상태는 <code>setup()</code> 함수 내에서 선언되어야 하며, 객체를 사용하여 반환되어야 합니다:</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">message</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>반환된 객체의 속성은 템플릿에서 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>message</code> 값을 동적 텍스트로 렌더링하는 방법입니다:</p>\\n</div>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">숫자 세기: </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>템플릿에서 <code>message</code> ref에 접근할 때, <code>.value</code>를 사용할 필요가 없습니다!\\n보다 간결한 사용을 위해 자동으로 언래핑됩니다.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>변경 시, 업데이트를 트리거할 수 있는 상태는 <strong>반응형</strong>으로 간주됩니다.\\nVue에서 반응형 상태는 컴포넌트에 유지됩니다.\\n<span class=\\"html\\">예제 코드에서 <code>createApp()</code>에 전달되는 객체는 컴포넌트입니다.</span></p>\\n<p>컴포넌트에서 객체를 반환해야하는 함수 <code>data</code> 옵션을 사용하여 반응형 상태를 선언할 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">안녕 Vue!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>템플릿에서 <code>message</code> 속성을 사용할 수 있습니다.\\n이것은 이중 중괄호 문법을 사용하여 <code>message</code> 값을 동적으로 텍스트로 렌더링하는 방법입니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>이중 중괄호 내부의 내용은 식별자나 경로에만 국한되지 않습니다.\\n유효한 JavaScript 표현식을 사용할 수도 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">split</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">)</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">reverse</span><span style=\\"color: #A6ACCD\\">()</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">join</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">) </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>이제 반응형 상태를 직접 만들고 이를 사용하여 템플릿의 <code>&lt;h1&gt;</code>에 동적 텍스트 컨텐츠를 렌더링해봅시다.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>이제 직접 <code>data</code> 속성을 만들고 템플릿의 <code>&lt;h1&gt;</code>에 텍스트 컨텐츠로 사용해봅시다.</p>\\n</div>\\n"},"step-3":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n","template.html":"<h1>나를 빨갛게 만들어 보세요</h1> \x3c!-- 여기에 동적 클래스 바인딩 추가 --\x3e\\n"},"_hint":{"App":{"template.html":"<h1 :class=\\"titleClass\\">나를 빨갛게 만들어 보세요</h1>\\n","composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"attribute-bindings\\" tabindex=\\"-1\\">속성 바인딩 <a class=\\"header-anchor\\" href=\\"#attribute-bindings\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>Vue에서 이중 중괄호는 텍스트 삽입에만 사용됩니다.\\n속성을 동적 값에 바인딩하려면 <code>v-bind</code> 디렉티브를 사용합니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-bind</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><strong>디렉티브</strong>는 <code>v-</code> 접두사로 시작하는 특수한 속성으로 Vue 템플릿 문법의 일부입니다.\\n텍스트 삽입과 유사하게 디렉티브 값은 컴포넌트의 상태에 접근할 수 있는 JavaScript 표현식입니다.\\n<code>v-bind</code> 및 디렉티브 문법에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/template-syntax.html\\">가이드 - 템플릿 문법</a>에서 설명합니다.</p>\\n<p>콜론(<code>:</code>) 뒤의 부분(<code>id</code>)은 디렉티브의 &quot;인자&quot;입니다.\\n여기서 엘리먼트의 <code>id</code> 속성은 컴포넌트 상태의 <code>dynamicId</code> 속성과 동기화됩니다.</p>\\n<p><code>v-bind</code>는 너무 자주 사용되기 때문에 전용 단축 문법이 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>이제 <span class=\\"options-api\\"><code>data</code> 속성</span><span class=\\"composition-api\\"><code>ref</code></span>의 <code>titleClass</code>을 값으로 사용하여,\\n<code>&lt;h1&gt;</code>의 <code>class</code>에 동적 바인딩을 추가해 봅시다.\\n올바르게 바인딩된 경우, 텍스트가 빨간색으로 변해야 합니다.</p>\\n"},"step-4":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"\x3c!-- 이 버튼이 작동하도록 만들어 봅시다 --\x3e\\n<button>숫자 세기: {{ count }}</button>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    function increment() {\\n      count.value++\\n    }\\n\\n    return {\\n      count,\\n      increment\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  },\\n  methods: {\\n    increment() {\\n      this.count++\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"increment\\">숫자 세기: {{ count }}</button>\\n"},"description.md":{}},"description.md":"<h1 id=\\"event-listeners\\" tabindex=\\"-1\\">이벤트 리스너 <a class=\\"header-anchor\\" href=\\"#event-listeners\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-on</code> 디렉티브를 사용하여 DOM 이벤트를 수신할 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-on</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>자주 사용되기 때문에 <code>v-on</code>에는 다음과 같은 단축 문법도 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>methods</code> 옵션을 사용하여 선언된 함수입니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>메서드 내에서 <code>this</code>를 사용하여 컴포넌트 인스턴스에 접근할 수 있습니다.\\n컴포넌트 인스턴스는 <code>data</code>에 의해 선언된 데이터 속성을 노출합니다.\\n이러한 속성을 변경하여 컴포넌트 상태를 업데이트할 수 있습니다.</p>\\n</div>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>&lt;script setup&gt;</code>에서 선언된 함수입니다:</p>\\n<div class=\\"language-vue\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">vue</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<p>여기서 참조되는 <code>increment</code>는 <code>setup()</code>에서 반환된 객체의 메서드입니다:</p>\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 컴포넌트의 count 상태 업데이트</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">increment</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>함수 내에서 ref 값을 변경하여 컴포넌트 상태를 업데이트할 수 있습니다.</p>\\n</div>\\n<p>이벤트 핸들러는 인라인 표현식을 사용할 수도 있으며,\\n수식어를 사용하여 일반적인 작업을 단순화할 수 있습니다.\\n이러한 세부 사항은 <a target=\\"_blank\\" href=\\"/guide/essentials/event-handling.html\\">가이드 - 이벤트 핸들링</a>에서 다룹니다.</p>\\n<p>이제 <code>increment</code> <span class=\\"options-api\\">메서드</span><span class=\\"composition-api\\">함수</span>를 직접 구현하고,\\n<code>v-on</code>을 사용하여 버튼에 바인딩 해봅시다.</p>\\n"},"step-5":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    function onInput(e) {\\n      text.value = e.target.value\\n    }\\n\\n    return {\\n      text,\\n      onInput\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  },\\n  methods: {\\n    onInput(e) {\\n      this.text = e.target.value\\n    }\\n  }\\n}\\n","template.html":"<input :value=\\"text\\" @input=\\"onInput\\" placeholder=\\"여기에 입력하기\\">\\n<p>{{ text }}</p>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    return {\\n      text\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  }\\n}\\n","template.html":"<input v-model=\\"text\\" placeholder=\\"여기에 입력하기\\">\\n<p>{{ text }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"form-bindings\\" tabindex=\\"-1\\">폼(form) 바인딩 <a class=\\"header-anchor\\" href=\\"#form-bindings\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-bind</code>와 <code>v-on</code>을 함께 사용하면, 폼 안의 입력 엘리먼트에 양방향 바인딩을 만들 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">value</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">input</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">onInput</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 핸들러는 네이티브 DOM 이벤트를 인자로 받습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD; font-style: italic\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 핸들러는 네이티브 DOM 이벤트를 인자로 받습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>입력란에 입력할 때, <code>&lt;p&gt;</code>에 텍스트가 업데이트되는 것을 볼 수 있습니다.</p>\\n<p>Vue는 양방향 바인딩을 단순화하기 위해, 위 문법을 간편 표기하는 <code>v-model</code> 디렉티브를 제공합니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>v-model</code>은 <code>&lt;input&gt;</code>의 값을 바인딩된 상태와 자동으로 동기화하므로,\\n더 이상 이에 대한 이벤트 핸들러를 사용할 필요가 없습니다.</p>\\n<p><code>v-model</code>은 텍스트 입력 외에도 체크박스, 라디오 버튼, 셀렉트 드롭다운과 같은 다른 입력 타입에서도 작동합니다.\\n자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/forms.html\\">가이드 - Form 입력 바인딩</a>에서 다룹니다.</p>\\n<p>이제 <code>v-model</code>을 대신 사용하도록 코드를 리팩토링 해봅시다.</p>\\n"},"step-6":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      // ...\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">토글 버튼</button>\\n<h1>Vue는 굉장해! 엄청나!</h1>\\n<h1>오 안돼 😢</h1>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      awesome.value = !awesome.value\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      this.awesome = !this.awesome\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">토글 버튼</button>\\n<h1 v-if=\\"awesome\\">Vue는 굉장해! 엄청나!</h1>\\n<h1 v-else>오 안돼 😢</h1>\\n"},"description.md":{}},"description.md":"<h1 id=\\"conditional-rendering\\" tabindex=\\"-1\\">조건부 렌더링 <a class=\\"header-anchor\\" href=\\"#conditional-rendering\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>엘리먼트를 조건부로 렌더링하기 위해 <code>v-if</code> 디렉티브를 사용할 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue는 굉장해! 엄청나!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>이 <code>&lt;h1&gt;</code>은 <code>awesome</code>의 값이 <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Truthy\\" target=\\"_blank\\" rel=\\"noreferrer\\">truthy</a>인 경우에만 렌더링됩니다.\\n<code>awesome</code>이 <a href=\\"https://developer.mozilla.org/en-US/docs/Glossary/Falsy\\" target=\\"_blank\\" rel=\\"noreferrer\\">falsy</a> 값으로 변경되면 DOM에서 제거됩니다.</p>\\n<p>또한 <code>v-else</code> 및 <code>v-else-if</code>를 사용하여 조건의 다른 분기를 나타낼 수도 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue는 굉장해! 엄청나!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-else</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">오 안돼 😢</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>현재 데모는 두 개의 <code>&lt;h1&gt;</code>을 동시에 표시하고 있으며,\\n버튼은 아무 작업도 수행하지 않습니다.\\n<code>v-if</code> 및 <code>v-else</code> 디렉티브를 추가하고 버튼을 사용하여 둘 사이를 전환할 수 있도록 <code>toggle()</code> 메서드를 구현해봅시다.</p>\\n<p><code>v-if</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/conditional.html\\">가이드 - 조건부 렌더링</a>에서 다룹니다.</p>\\n"},"step-7":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 각 할 일에 고유한 ID 부여\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\' },\\n      { id: id++, text: \'JavaScript 배우기\' },\\n      { id: id++, text: \'Vue 배우기\' }\\n    ])\\n\\n    function addTodo() {\\n      // ...\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      // ...\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 각 할 일에 고유한 ID 부여\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\' },\\n        { id: id++, text: \'JavaScript 배우기\' },\\n        { id: id++, text: \'Vue 배우기\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      // ...\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>할 일 추가</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 각 할 일에 고유한 ID 부여\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\' },\\n      { id: id++, text: \'JavaScript 배우기\' },\\n      { id: id++, text: \'Vue 배우기\' }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 각 할 일에 고유한 ID 부여\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\' },\\n        { id: id++, text: \'JavaScript 배우기\' },\\n        { id: id++, text: \'Vue 배우기\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>할 일 추가</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"description.md":{}},"description.md":"<h1 id=\\"list-rendering\\" tabindex=\\"-1\\">리스트 렌더링 <a class=\\"header-anchor\\" href=\\"#list-rendering\\" aria-hidden=\\"true\\">#</a></h1>\\n<p><code>v-for</code> 디렉티브를 사용하여 자료 배열을 엘리먼트 목록으로 렌더링할 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">key</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">id</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">text </span><span style=\\"color: #89DDFF\\">}}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>여기서 <code>todo</code>는 현재 반복 중인 배열 요소를 나타내는 로컬 변수입니다. 함수 범위와 유사하게 <code>v-for</code> 요소 위 또는 내부에서만 액세스할 수 있습니다.</p>\\n<p>각 todo 객체에 고유한 <code>id</code>를 부여하고, 각 <code>&lt;li&gt;</code>에 <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#key\\">특별한 속성인 <code>key</code></a>를 바인딩했습니다.\\n<code>key</code>를 사용하면 Vue가 각 <code>&lt;li&gt;</code>를 정확하게 이동시켜 배열에서 해당 객체의 위치와 일치하도록 할 수 있습니다.</p>\\n<p>목록을 업데이트하는 방법에는 두 가지가 있습니다:</p>\\n<ol>\\n<li>\\n<p>자료 배열에서 <a href=\\"https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating\\" target=\\"_blank\\" rel=\\"noreferrer\\">변경 메서드(mutating methods)</a>를 호출합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>배열을 새 배열로 교체합니다:</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n</ol>\\n<p>여기에 간단한 할 일 목록이 있습니다.\\n<code>addTodo()</code> 및 <code>removeTodo()</code> 메서드에 대한 로직을 구현하고 작동되도록 해봅시다!</p>\\n<p><code>v-for</code>에 대한 자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/list.html\\">가이드 - 리스트 렌더링</a>에서 다룹니다.</p>\\n"},"step-8":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\', done: true },\\n      { id: id++, text: \'JavaScript 배우기\', done: true },\\n      { id: id++, text: \'Vue 배우기\', done: false }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\', done: true },\\n        { id: id++, text: \'JavaScript 배우기\', done: true },\\n        { id: id++, text: \'Vue 배우기\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    // ...\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n"},"_hint":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'HTML 배우기\', done: true },\\n      { id: id++, text: \'JavaScript 배우기\', done: true },\\n      { id: id++, text: \'Vue 배우기\', done: false }\\n    ])\\n\\n    const filteredTodos = computed(() => {\\n      return hideCompleted.value\\n        ? todos.value.filter((t) => !t.done)\\n        : todos.value\\n    })\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      filteredTodos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'HTML 배우기\', done: true },\\n        { id: id++, text: \'JavaScript 배우기\', done: true },\\n        { id: id++, text: \'Vue 배우기\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    filteredTodos() {\\n      return this.hideCompleted\\n        ? this.todos.filter((t) => !t.done)\\n        : this.todos\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in filteredTodos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"computed-property\\" tabindex=\\"-1\\">계산된 속성 <a class=\\"header-anchor\\" href=\\"#computed-property\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>이전 단계의 할 일 목록을 계속 만들어 나가봅시다.\\n여기에 이미 각 할 일에 토글 기능을 추가했습니다.\\n이것은 각 할 일 객체에 <code>done</code> 속성을 추가하고,\\n<code>v-model</code>을 사용하여 체크박스에 바인딩함으로써 작동합니다.</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">type</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">checkbox</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">done</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>다음 개선 사항은 이미 완료된 할 일을 숨길 수 있는 기능을 추가하는 것입니다.\\n이미 <code>hideCompleted</code> 상태를 토글하는 버튼이 있습니다.\\n하지만 그 상태를 바탕으로 목록 내 항목을 어떻게 렌더링해야 할까요?</p>\\n<div class=\\"options-api\\">\\n<p><a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\">계산된(computed) 속성</a>을 소개합니다.\\n<code>computed</code> 옵션을 사용하여 반응적으로 계산되는 속성을 선언할 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// `this.hideCompleted`를</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 기반으로 필터링된 할 일 반환</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// `this.hideCompleted`를</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 기반으로 필터링된 할 일 반환</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"composition-api\\">\\n<p><a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\"><code>computed()</code></a>를 소개합니다.\\n반응 데이터 소스를 기반으로 <code>.value</code>를 계산하는 계산된 참조(ref)를 만들 수 있습니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> hideCompleted </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> filteredTodos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// `todos.value` 및 `hideCompleted.value`를</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 기반으로 필터링된 할 일을 반환.</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight has-highlighted-lines\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">createApp</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">hideCompleted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    ])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">filteredTodos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// `todos.value` 및 `hideCompleted.value`를</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 기반으로 필터링된 할 일을 반환.</span></span>\\n<span class=\\"line highlighted\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"language-diff\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">diff</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">-</span><span style=\\"color: #F07178\\"> &lt;li v-for=&quot;todo in todos&quot;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">+</span><span style=\\"color: #C3E88D\\"> &lt;li v-for=&quot;todo in filteredTodos&quot;&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>계산된 속성은 계산에 사용된 다른 반응형 상태를 의존성으로 추적합니다.\\n결과를 캐시하고 의존성이 변경되면 자동으로 업데이트합니다.</p>\\n<p>이제 계산된 속성 <code>filteredTodos</code>을 추가하고, 계산되는 로직을 구현해 봅시다!\\n올바르게 구현된 경우, 완료된 항목 숨기기 상태일 때 할 일을 체크하면 즉시 숨겨져야 합니다.</p>\\n"},"step-9":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // ...\\n}\\n","template.html":"<p ref=\\"p\\">안녕</p>\\n"},"_hint":{"App":{"composition.js":"import { ref, onMounted } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    onMounted(() => {\\n      p.value.textContent = \'마운트 되었어요!\'\\n    })\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  mounted() {\\n    this.$refs.p.textContent = \'마운트 되었어요!\'\\n  }\\n}\\n","template.html":"<p ref=\\"p\\">안녕</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"lifecycle-and-template-refs\\" tabindex=\\"-1\\">생명주기와 템플릿 참조 <a class=\\"header-anchor\\" href=\\"#lifecycle-and-template-refs\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>지금까지 Vue는 반응형 및 선언적 렌더링으로 모든 DOM 업데이트를 처리해 왔습니다.\\n그러나 필연적으로 DOM을 수동으로 작업해야 하는 경우가 있습니다.</p>\\n<p>우리는 <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#ref\\">특별한 속성인 <code>ref</code></a>를 사용하여 <strong>템플릿 참조</strong>를 요청할 수 있습니다:</p>\\n<div class=\\"language-template\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">template</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">ref</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">p</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">안녕</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>참조에 접근하려면 다음과 같이 이름이 일치하는 <code>ref</code>를 선언<span class=\\"html\\">하고 노출</span>해야 합니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> p </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">p</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">p</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p><code>ref</code>는 <code>null</code> 값으로 초기화합니다.\\n<span class=\\"sfc\\"><code>&lt;script setup&gt;</code></span><span class=\\"html\\"><code>setup()</code></span> 실행 시 해당 엘리먼트가 아직 존재하지 않기 때문입니다.\\n템플릿 참조는 컴포넌트가 <strong>마운트된 후</strong>에만 접근할 수 있습니다.</p>\\n<p>마운트된 후, 코드를 실행하려면 <code>onMounted()</code> 함수를 사용해야 합니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 이제 컴포넌트가 마운트되었습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 이제 컴포넌트가 마운트되었습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<p>엘리먼트는 <code>this.$refs</code>에 <code>this.$refs.p</code>로 노출됩니다.\\n그러나 컴포넌트가 <strong>마운트된 후</strong>에만 접근할 수 있습니다.</p>\\n<p>마운트된 후, 코드를 실행하려면 <code>mounted</code> 옵션을 사용해야 합니다:</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 이제 컴포넌트가 마운트되었습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><button title=\\"Copy Code\\" class=\\"copy\\"></button><span class=\\"lang\\">js</span><pre v-pre class=\\"shiki material-theme-palenight\\" ><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 이제 컴포넌트가 마운트되었습니다.</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<p>이것을 컴포넌트 <strong>수명 주기 훅</strong>이라고 하며,\\n수명 주기의 특정 시간에 호출할 콜백을 등록할 수 있습니다.\\n<span class=\\"options-api\\"><code>created</code> 및 <code>updated</code></span><span class=\\"composition-api\\"><code>onUpdated</code> 및 <code>onUnmounted</code></span>와 같은 다른 훅도 있습니다.\\n자세한 내용은 <a target=\\"_blank\\" href=\\"/guide/essentials/lifecycle.html#lifecycle-diagram\\">수명 주기 도표</a>에서 다룹니다.</p>\\n<p>이제 <span class=\\"options-api\\"><code>mounted</code></span><span class=\\"composition-api\\"><code>onMounted</code></span> 훅을 추가하고,\\n<span class=\\"options-api\\"><code>this.$refs.p</code></span><span class=\\"composition-api\\"><code>p.value</code></span>를 통해 <code>&lt;p&gt;</code>에 접근한 다음,\\n직접 DOM을 조작해봅시다(예: <code>textContent</code> 변경).</p>\\n"}}'),S={class:"tutorial"},M=["innerHTML"],V={key:0,class:"hint"},I=["href"],J=["href"],$=q(p({__name:"TutorialRepl",setup(p){const q=new s({defaultVueRuntimeURL:`https://unpkg.com/vue@${e}/dist/vue.esm-browser.js`}),$=t(),O=w("prefer-composition"),H=w("prefer-sfc"),L=t(""),P=Object.keys(_).sort(((s,n)=>Number(s.replace(/^step-/,""))-Number(n.replace(/^step-/,"")))),B=P.length,R=/<h1.*?>(.+?)<a class="header-anchor/,U=P.map(((s,n)=>({text:`${n+1}. ${_[s]["description.md"].match(R)[1]}`,link:`#${s}`}))),z=c((()=>{var s;return null==(s=_[L.value])?void 0:s["description.md"]})),X=c((()=>P.indexOf(L.value)+1)),N=c((()=>{const s=L.value.match(/\d+/),n=s&&"step-"+(+s[0]-1);if(n&&_.hasOwnProperty(n))return n})),G=c((()=>{const s=L.value.match(/\d+/),n=s&&"step-"+(+s[0]+1);if(n&&_.hasOwnProperty(n))return n})),W=t(!1);function K(s=!1){let n=location.hash.slice(1);_.hasOwnProperty(n)||(n="step-1",location.replace(`/tutorial/#${n}`)),L.value=n;const a=W.value?_[n]._hint:_[n];q.setFiles(H.value?o(a,O.value):l(a,O.value),H.value?"App.vue":"index.html"),s&&T((()=>{$.value.scrollTop=0}))}function Y(){W.value=!W.value,K()}return r([O,H],(()=>K())),n((()=>{W.value=!1,K(!0)})),K(),(s,n)=>{var o;return i(),d("section",S,[y("article",{class:"instruction",ref_key:"instruction",ref:$},[D(F),D(f(x),{button:`${f(X)} / ${f(B)}`},{default:C((()=>[(i(!0),d(u,null,A(f(U),((s,n)=>(i(),h(f(b),{class:v(["vt-menu-link",{active:n+1===f(X)}]),href:s.link},{default:C((()=>[m(g(s.text),1)])),_:2},1032,["class","href"])))),256))])),_:1},8,["button"]),y("div",{class:"vt-doc",innerHTML:f(z)},null,8,M),(null==(o=f(_)[L.value])?void 0:o._hint)?(i(),d("div",V,[y("button",{onClick:Y},g(W.value?"Reset":"Show me!"),1)])):j("",!0),y("footer",null,[f(N)?(i(),d("a",{key:0,href:`#${f(N)}`},[D(f(k),{class:"vt-link-icon",style:{margin:"0"}}),m(" Prev")],8,I)):j("",!0),f(G)?(i(),d("a",{key:1,class:"next-step",href:`#${f(G)}`},[m("Next "),D(f(E),{class:"vt-link-icon"})],8,J)):j("",!0)])],512),D(f(a),{layout:"vertical",store:f(q),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:n[0]||(n[0]=s=>W.value=!1)},null,8,["store"])])}}}),[["__scopeId","data-v-e1333ae2"]]);export{$ as default};
