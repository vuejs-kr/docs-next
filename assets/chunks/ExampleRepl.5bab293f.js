import{R as n,o as e,a as t,r as o,b as s}from"./utils.21692dda.js";import{_ as i,g as a,a8 as l,a9 as r,aa as d,o as c,i as p,u}from"../app.ea8bebef.js";const m=JSON.parse('{"attribute-bindings":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const message = ref(\'안녕 Vue!\')\\n    const isRed = ref(true)\\n    const color = ref(\'green\')\\n\\n    function toggleRed() {\\n      isRed.value = !isRed.value\\n    }\\n\\n    function toggleColor() {\\n      color.value = color.value === \'green\' ? \'blue\' : \'green\'\\n    }\\n\\n    return {\\n      message,\\n      isRed,\\n      color,\\n      toggleRed,\\n      toggleColor\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'안녕 Vue!\',\\n      isRed: true,\\n      color: \'green\'\\n    }\\n  },\\n  methods: {\\n    toggleRed() {\\n      this.isRed = !this.isRed\\n    },\\n    toggleColor() {\\n      this.color = this.color === \'green\' ? \'blue\' : \'green\'\\n    }\\n  }\\n}\\n","style.css":".red {\\n  color: red;\\n}\\n","template.html":"<p>\\n  <span :title=\\"message\\">\\n    동적으로 바인딩된 나의 title을 보려면 몇 초 동안 마우스를 올려놓으세요!\\n  </span>\\n</p>\\n\\n\x3c!--\\n클래스 바인딩은 일반 문자열 외에도 객체 및 배열을 지원합니다.\\n--\x3e\\n<p :class=\\"{ red: isRed }\\" @click=\\"toggleRed\\">\\n  이것은 빨간색이어야 합니다... 하지만 전환하려면 저를 클릭하세요.\\n</p>\\n\\n\x3c!-- 스타일 바인딩은 객체 및 배열도 지원합니다. --\x3e\\n<p :style=\\"{ color }\\" @click=\\"toggleColor\\">\\n  이것은 녹색이어야 하며, 클릭 시 녹색과 파란색 사이를 전환합니다.\\n</p>\\n"},"description.txt":"이곳에서 엘리먼트의 속성에 상태를 반응형으로 바인딩합니다.\\n:title 문법은 v-bind:title의 줄임말입니다."},"cells":{"App":{"composition.js":"import Cell from \'./Cell.vue\'\\nimport { cells } from \'./store.js\'\\n\\nexport default {\\n  components: {\\n    Cell\\n  },\\n  setup() {\\n    const cols = cells.map((_, i) => String.fromCharCode(65 + i))\\n    return {\\n      cols,\\n      cells\\n    }\\n  }\\n}\\n","options.js":"import Cell from \'./Cell.vue\'\\nimport { cells } from \'./store.js\'\\n\\nexport default {\\n  components: {\\n    Cell\\n  },\\n  data() {\\n    return {\\n      cols: cells.map((_, i) => String.fromCharCode(65 + i)),\\n      cells\\n    }\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n}\\n\\ntable {\\n  border-collapse: collapse;\\n  table-layout: fixed;\\n  width: 100%;\\n}\\n\\nth {\\n  background-color: #eee;\\n}\\n\\ntr:first-of-type th {\\n  width: 100px;\\n}\\n\\ntr:first-of-type th:first-of-type {\\n  width: 25px;\\n}\\n\\ntd {\\n  border: 1px solid #ccc;\\n  height: 1.5em;\\n  overflow: hidden;\\n}\\n","template.html":"<table>\\n  <thead>\\n    <tr>\\n      <th></th>\\n      <th v-for=\\"c in cols\\">{{ c }}</th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr v-for=\\"i in cells[0].length\\">\\n      <th>{{ i - 1 }}</th>\\n      <td v-for=\\"(c, j) in cols\\">\\n        <Cell :r=\\"i - 1\\" :c=\\"j\\"></Cell>\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n"},"Cell":{"composition.js":"import { ref } from \'vue\'\\nimport { cells, evalCell } from \'./store.js\'\\n\\nexport default {\\n  props: {\\n    c: Number,\\n    r: Number\\n  },\\n  setup(props) {\\n    const editing = ref(false)\\n\\n    function update(e) {\\n      editing.value = false\\n      cells[props.c][props.r] = e.target.value.trim()\\n    }\\n\\n    return {\\n      cells,\\n      editing,\\n      evalCell,\\n      update\\n    }\\n  }\\n}\\n","options.js":"import { cells, evalCell } from \'./store.js\'\\n\\nexport default {\\n  props: {\\n    c: Number,\\n    r: Number\\n  },\\n  data() {\\n    return {\\n      editing: false,\\n      cells\\n    }\\n  },\\n  methods: {\\n    evalCell,\\n    update(e) {\\n      this.editing = false\\n      cells[this.c][this.r] = e.target.value.trim()\\n    }\\n  }\\n}\\n","style.css":".cell, .cell input {\\n  height: 1.5em;\\n  line-height: 1.5;\\n  font-size: 15px;\\n}\\n\\n.cell span {\\n  padding: 0 6px;\\n}\\n\\n.cell input {\\n  width: 100%;\\n  box-sizing: border-box;\\n}\\n","template.html":"<div class=\\"cell\\" :title=\\"cells[c][r]\\" @click=\\"editing = true\\">\\n  <input\\n    v-if=\\"editing\\"\\n    :value=\\"cells[c][r]\\"\\n    @change=\\"update\\"\\n    @blur=\\"update\\"\\n    @vnode-mounted=\\"({ el }) => el.focus()\\"\\n  >\\n  <span v-else>{{ evalCell(cells[c][r]) }}</span>\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#cells","store.js":"import { reactive } from \'vue\'\\n\\nconst COLS = 5\\nconst ROWS = 20\\n\\nexport const cells = reactive(\\n  Array.from(Array(COLS).keys()).map((i) =>\\n    Array.from(Array(ROWS).keys()).map((i) => \'\')\\n  )\\n)\\n\\n// adapted from https://codesandbox.io/s/jotai-7guis-task7-cells-mzoit?file=/src/atoms.ts\\n// by @dai-shi\\nexport function evalCell(exp) {\\n  if (!exp.startsWith(\'=\')) {\\n    return exp\\n  }\\n\\n  // = A1 + B2 ---\x3e get(0,1) + get(1,2)\\n  exp = exp\\n    .slice(1)\\n    .replace(\\n      /\\\\b([A-Z])(\\\\d{1,2})\\\\b/g,\\n      (_, c, r) => `get(${c.charCodeAt(0) - 65},${r})`\\n    )\\n\\n  try {\\n    return new Function(\'get\', `return ${exp}`)(getCellValue)\\n  } catch (e) {\\n    return `#ERROR ${e}`\\n  }\\n}\\n\\nfunction getCellValue(c, r) {\\n  const val = evalCell(cells[c][r])\\n  const num = Number(val)\\n  return Number.isFinite(num) ? num : val\\n}\\n"},"circle-drawer":{"App":{"composition.js":"import { ref, shallowReactive, toRaw } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const history = shallowReactive([[]])\\n    const index = ref(0)\\n    const circles = ref([])\\n    const selected = ref()\\n    const adjusting = ref(false)\\n\\n    function onClick({ clientX: x, clientY: y }) {\\n      if (adjusting.value) {\\n        adjusting.value = false\\n        selected.value = null\\n        push()\\n        return\\n      }\\n\\n      selected.value = circles.value.find(({ cx, cy, r }) => {\\n        const dx = cx - x\\n        const dy = cy - y\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\n      })\\n\\n      if (!selected.value) {\\n        circles.value.push({\\n          cx: x,\\n          cy: y,\\n          r: 50\\n        })\\n        push()\\n      }\\n    }\\n\\n    function adjust(circle) {\\n      selected.value = circle\\n      adjusting.value = true\\n    }\\n\\n    function push() {\\n      history.length = ++index.value\\n      history.push(clone(circles.value))\\n      console.log(toRaw(history))\\n    }\\n\\n    function undo() {\\n      circles.value = clone(history[--index.value])\\n    }\\n\\n    function redo() {\\n      circles.value = clone(history[++index.value])\\n    }\\n\\n    function clone(circles) {\\n      return circles.map((c) => ({ ...c }))\\n    }\\n\\n    return {\\n      history,\\n      index,\\n      circles,\\n      selected,\\n      adjusting,\\n      onClick,\\n      adjust,\\n      undo,\\n      redo\\n    }\\n  }\\n}\\n","options.js":"function clone(circles) {\\n  return circles.map((c) => ({ ...c }))\\n}\\n\\nexport default {\\n  data() {\\n    return {\\n      history: [[]],\\n      index: 0,\\n      circles: [],\\n      selected: null,\\n      adjusting: false\\n    }\\n  },\\n  methods: {\\n    onClick({ clientX: x, clientY: y }) {\\n      if (this.adjusting) {\\n        this.adjusting = false\\n        this.selected = null\\n        this.push()\\n        return\\n      }\\n\\n      this.selected = this.circles.find(({ cx, cy, r }) => {\\n        const dx = cx - x\\n        const dy = cy - y\\n        return Math.sqrt(dx * dx + dy * dy) <= r\\n      })\\n\\n      if (!this.selected) {\\n        this.circles.push({\\n          cx: x,\\n          cy: y,\\n          r: 50\\n        })\\n        this.push()\\n      }\\n    },\\n\\n    adjust(circle) {\\n      this.selected = circle\\n      this.adjusting = true\\n    },\\n\\n    push() {\\n      this.history.length = ++this.index\\n      this.history.push(clone(this.circles))\\n    },\\n\\n    undo() {\\n      this.circles = clone(this.history[--this.index])\\n    },\\n\\n    redo() {\\n      this.circles = clone(this.history[++this.index])\\n    }\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n  overflow: hidden;\\n}\\n\\nsvg {\\n  width: 100vw;\\n  height: 100vh;\\n  background-color: #eee;\\n}\\n\\ncircle {\\n  stroke: #000;\\n}\\n\\n.controls {\\n  position: fixed;\\n  top: 10px;\\n  left: 0;\\n  right: 0;\\n  text-align: center;\\n}\\n\\n.controls button + button {\\n  margin-left: 6px;\\n}\\n\\n.dialog {\\n  position: fixed;\\n  top: calc(50% - 50px);\\n  left: calc(50% - 175px);\\n  background: #fff;\\n  width: 350px;\\n  height: 100px;\\n  padding: 5px 20px;\\n  box-sizing: border-box;\\n  border-radius: 4px;\\n  text-align: center;\\n  box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.25);\\n}\\n\\n.dialog input {\\n  display: block;\\n  width: 200px;\\n  margin: 0px auto;\\n}\\n\\n.tip {\\n  text-align: center;\\n  padding: 0 50px;\\n  color: #bbb;\\n}\\n","template.html":"<svg @click=\\"onClick\\">\\n  <foreignObject x=\\"0\\" y=\\"40%\\" width=\\"100%\\" height=\\"200\\">\\n    <p class=\\"tip\\">\\n      캔버스 클릭 시 원이 그려지며, 원 클릭 시 선택됩니다.\\n      캔버스 우클릭 시 원의 반경을 조정할 수 있습니다.\\n    </p>\\n  </foreignObject>\\n  <circle\\n    v-for=\\"circle in circles\\"\\n    :cx=\\"circle.cx\\"\\n    :cy=\\"circle.cy\\"\\n    :r=\\"circle.r\\"\\n    :fill=\\"circle === selected ? \'#ccc\' : \'#fff\'\\"\\n    @click=\\"selected = circle\\"\\n    @contextmenu.prevent=\\"adjust(circle)\\"\\n  ></circle>\\n</svg>\\n\\n<div class=\\"controls\\">\\n  <button @click=\\"undo\\" :disabled=\\"index <= 0\\">실행 취소</button>\\n  <button @click=\\"redo\\" :disabled=\\"index >= history.length - 1\\">다시 실행</button>\\n</div>\\n\\n<div class=\\"dialog\\" v-if=\\"adjusting\\" @click.stop>\\n  <p>({{ selected.cx }}, {{ selected.cy }})위치에 있는 원의 반지름을 조정합니다.</p>\\n  <input type=\\"range\\" v-model=\\"selected.r\\" min=\\"1\\" max=\\"300\\">\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#circle"},"conditionals-and-loops":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const show = ref(true)\\n    const list = ref([1, 2, 3])\\n\\n    return {\\n      show,\\n      list\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      show: true,\\n      list: [1, 2, 3]\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"show = !show\\">목록 전환</button>\\n<button @click=\\"list.push(list.length + 1)\\">숫자 추가</button>\\n<button @click=\\"list.pop()\\">숫자 제거</button>\\n<button @click=\\"list.reverse()\\">목록 뒤집기</button>\\n\\n<ul v-if=\\"show && list.length\\">\\n  <li v-for=\\"item of list\\">{{ item }}</li>\\n</ul>\\n<p v-else-if=\\"list.length\\">목록이 비어있지 않지만, 숨김처리 되었습니다.</p>\\n<p v-else>목록이 비었습니다.</p>\\n"},"description.txt":"v-if 및 v-for 디렉티브를 사용하여 컨텐츠를 조건부로 또는 반복적으로 렌더링할 수 있습니다.\\n"},"counter":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"{{ count }}\\n<button @click=\\"count++\\">숫자세기</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#counter"},"crud":{"App":{"composition.js":"import { ref, reactive, computed, watch } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const names = reactive([\'봉, 미선\', \'신, 형만\', \'신, 노스케\'])\\n    const selected = ref(\'\')\\n    const prefix = ref(\'\')\\n    const first = ref(\'\')\\n    const last = ref(\'\')\\n\\n    const filteredNames = computed(() =>\\n      names.filter((n) =>\\n        n.toLowerCase().startsWith(prefix.value.toLowerCase())\\n      )\\n    )\\n\\n    watch(selected, (name) => {\\n      ;[last.value, first.value] = name.split(\', \')\\n    })\\n\\n    function create() {\\n      if (hasValidInput()) {\\n        const fullName = `${last.value}, ${first.value}`\\n        if (!names.includes(fullName)) {\\n          names.push(fullName)\\n          first.value = last.value = \'\'\\n        }\\n      }\\n    }\\n\\n    function update() {\\n      if (hasValidInput() && selected.value) {\\n        const i = names.indexOf(selected.value)\\n        names[i] = selected.value = `${last.value}, ${first.value}`\\n      }\\n    }\\n\\n    function del() {\\n      if (selected.value) {\\n        const i = names.indexOf(selected.value)\\n        names.splice(i, 1)\\n        selected.value = first.value = last.value = \'\'\\n      }\\n    }\\n\\n    function hasValidInput() {\\n      return first.value.trim() && last.value.trim()\\n    }\\n\\n    return {\\n      filteredNames,\\n      selected,\\n      prefix,\\n      first,\\n      last,\\n      create,\\n      update,\\n      del\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      names: [\'봉, 미선\', \'신, 형만\', \'신, 노스케\'],\\n      selected: \'\',\\n      prefix: \'\',\\n      first: \'\',\\n      last: \'\'\\n    }\\n  },\\n  computed: {\\n    filteredNames() {\\n      return this.names.filter((n) =>\\n        n.toLowerCase().startsWith(this.prefix.toLowerCase())\\n      )\\n    }\\n  },\\n  watch: {\\n    selected(name) {\\n      ;[this.last, this.first] = name.split(\', \')\\n    }\\n  },\\n  methods: {\\n    create() {\\n      if (this.hasValidInput()) {\\n        const fullName = `${this.last}, ${this.first}`\\n        if (!this.names.includes(fullName)) {\\n          this.names.push(fullName)\\n          this.first = this.last = \'\'\\n        }\\n      }\\n    },\\n    update() {\\n      if (this.hasValidInput() && this.selected) {\\n        const i = this.names.indexOf(this.selected)\\n        this.names[i] = this.selected = `${this.last}, ${this.first}`\\n      }\\n    },\\n    del() {\\n      if (this.selected) {\\n        const i = this.names.indexOf(this.selected)\\n        this.names.splice(i, 1)\\n        this.selected = this.first = this.last = \'\'\\n      }\\n    },\\n    hasValidInput() {\\n      return this.first.trim() && this.last.trim()\\n    }\\n  }\\n}\\n","style.css":"* {\\n  font-size: inherit;\\n}\\n\\ninput {\\n  display: block;\\n  margin-bottom: 10px;\\n}\\n\\nselect {\\n  float: left;\\n  margin: 0 1em 1em 0;\\n  width: 14em;\\n}\\n\\n.buttons {\\n  clear: both;\\n}\\n\\nbutton + button {\\n  margin-left: 5px;\\n}\\n","template.html":"<div><input v-model=\\"prefix\\" placeholder=\\"시작 문자열 필터\\"></div>\\n\\n<select size=\\"5\\" v-model=\\"selected\\">\\n  <option v-for=\\"name in filteredNames\\">{{ name }}</option>\\n</select>\\n\\n<label>성: <input v-model=\\"last\\"></label>\\n<label>이름: <input v-model=\\"first\\"></label>\\n\\n<div class=\\"buttons\\">\\n  <button @click=\\"create\\">생성</button>\\n  <button @click=\\"update\\">수정</button>\\n  <button @click=\\"del\\">삭제</button>\\n</div>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#crud"},"fetching-data":{"App":{"composition.js":"import { ref, watchEffect } from \'vue\'\\n\\nconst API_URL = `https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=`\\nconst branches = [\'main\', \'v2-compat\']\\n\\nexport default {\\n  setup() {\\n    const currentBranch = ref(branches[0])\\n    const commits = ref(null)\\n\\n    watchEffect(async () => {\\n      // 이 이팩트는 즉시 실행되고\\n      // currentBranch.value가 변경될 때마다\\n      // 다시 실행됩니다.\\n      const url = `${API_URL}${currentBranch.value}`\\n      commits.value = await (await fetch(url)).json()\\n    })\\n\\n    function truncate(v) {\\n      const newline = v.indexOf(\'\\\\n\')\\n      return newline > 0 ? v.slice(0, newline) : v\\n    }\\n\\n    function formatDate(v) {\\n      return v.replace(/T|Z/g, \' \')\\n    }\\n\\n    return {\\n      branches,\\n      currentBranch,\\n      commits,\\n      truncate,\\n      formatDate\\n    }\\n  }\\n}\\n","options.js":"const API_URL = `https://api.github.com/repos/vuejs/core/commits?per_page=3&sha=`\\n\\nexport default {\\n  data: () => ({\\n    branches: [\'main\', \'v2-compat\'],\\n    currentBranch: \'main\',\\n    commits: null\\n  }),\\n\\n  created() {\\n    // 초기화 시 가져오기\\n    this.fetchData()\\n  },\\n\\n  watch: {\\n    // currentBranch가 변경될 때마다 데이터 다시 가져오기\\n    currentBranch: \'fetchData\'\\n  },\\n\\n  methods: {\\n    async fetchData() {\\n      const url = `${API_URL}${this.currentBranch}`\\n      this.commits = await (await fetch(url)).json()\\n    },\\n    truncate(v) {\\n      const newline = v.indexOf(\'\\\\n\')\\n      return newline > 0 ? v.slice(0, newline) : v\\n    },\\n    formatDate(v) {\\n      return v.replace(/T|Z/g, \' \')\\n    }\\n  }\\n}\\n","style.css":"a {\\n  text-decoration: none;\\n  color: #42b883;\\n}\\nli {\\n  line-height: 1.5em;\\n  margin-bottom: 20px;\\n}\\n.author,\\n.date {\\n  font-weight: bold;\\n}\\n","template.html":"<h1>Vue Core 최신 커밋</h1>\\n<template v-for=\\"branch in branches\\">\\n  <input type=\\"radio\\"\\n    :id=\\"branch\\"\\n    :value=\\"branch\\"\\n    name=\\"branch\\"\\n    v-model=\\"currentBranch\\">\\n  <label :for=\\"branch\\">{{ branch }}</label>\\n</template>\\n<p>vuejs/vue@{{ currentBranch }}</p>\\n<ul>\\n  <li v-for=\\"{ html_url, sha, author, commit } in commits\\">\\n    <a :href=\\"html_url\\" target=\\"_blank\\" class=\\"commit\\">{{ sha.slice(0, 7) }}</a>\\n    - <span class=\\"message\\">{{ truncate(commit.message) }}</span><br>\\n    by <span class=\\"author\\">\\n      <a :href=\\"author.html_url\\" target=\\"_blank\\">{{ commit.author.name }}</a>\\n    </span>\\n    at <span class=\\"date\\">{{ formatDate(commit.author.date) }}</span>\\n  </li>\\n</ul>\\n"},"description.txt":"이 예제는 GitHub의 API에서 최신 Vue.js 커밋 데이터를 가져와 목록으로 표시합니다.\\n두 개의 브런치 간에 전환할 수 있습니다."},"flight-booker":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const flightType = ref(\'one-way flight\')\\n    const departureDate = ref(dateToString(new Date()))\\n    const returnDate = ref(departureDate.value)\\n\\n    const isReturn = computed(() => flightType.value === \'return flight\')\\n\\n    const canBook = computed(\\n      () =>\\n        !isReturn.value ||\\n        stringToDate(returnDate.value) > stringToDate(departureDate.value)\\n    )\\n\\n    function book() {\\n      alert(\\n        isReturn.value\\n          ? `${departureDate.value}에 출발하여 ${returnDate.value}에 돌아오는 왕복 항공편을 예약하셨습니다.`\\n          : `${departureDate.value}에 출발하는 편도 항공편을 예약하셨습니다.`\\n      )\\n    }\\n\\n    function stringToDate(str) {\\n      const [y, m, d] = str.split(\'-\')\\n      return new Date(+y, m - 1, +d)\\n    }\\n\\n    function dateToString(date) {\\n      return (\\n        date.getFullYear() +\\n        \'-\' +\\n        pad(date.getMonth() + 1) +\\n        \'-\' +\\n        pad(date.getDate())\\n      )\\n    }\\n\\n    function pad(n, s = String(n)) {\\n      return s.length < 2 ? `0${s}` : s\\n    }\\n\\n    return {\\n      flightType,\\n      departureDate,\\n      returnDate,\\n      isReturn,\\n      canBook,\\n      book\\n    }\\n  }\\n}\\n","options.js":"function stringToDate(str) {\\n  const [y, m, d] = str.split(\'-\')\\n  return new Date(+y, m - 1, +d)\\n}\\n\\nfunction dateToString(date) {\\n  return (\\n    date.getFullYear() +\\n    \'-\' +\\n    pad(date.getMonth() + 1) +\\n    \'-\' +\\n    pad(date.getDate())\\n  )\\n}\\n\\nfunction pad(n, s = String(n)) {\\n  return s.length < 2 ? `0${s}` : s\\n}\\n\\nexport default {\\n  data() {\\n    return {\\n      flightType: \'one-way flight\',\\n      departureDate: dateToString(new Date()),\\n      returnDate: dateToString(new Date())\\n    }\\n  },\\n  computed: {\\n    isReturn() {\\n      return this.flightType === \'return flight\'\\n    },\\n    canBook() {\\n      return (\\n        !this.isReturn ||\\n        stringToDate(this.returnDate) > stringToDate(this.departureDate)\\n      )\\n    }\\n  },\\n  methods: {\\n    book() {\\n      alert(\\n        this.isReturn\\n          ? `${this.departureDate}에 출발하여 ${this.returnDate}에 돌아오는 왕복 항공편을 예약하셨습니다.`\\n          : `${this.departureDate}에 출발하는 편도 항공편을 예약하셨습니다.`\\n      )\\n    }\\n  }\\n}\\n","style.css":"select,\\ninput,\\nbutton {\\n  display: block;\\n  margin: 0.5em 0;\\n  font-size: 15px;\\n}\\n\\ninput[disabled] {\\n  color: #999;\\n}\\n\\np {\\n  color: red;\\n}\\n","template.html":"<select v-model=\\"flightType\\">\\n  <option value=\\"one-way flight\\">편도</option>\\n  <option value=\\"return flight\\">왕복</option>\\n</select>\\n\\n<input type=\\"date\\" v-model=\\"departureDate\\">\\n<input type=\\"date\\" v-model=\\"returnDate\\" :disabled=\\"!isReturn\\">\\n\\n<button :disabled=\\"!canBook\\" @click=\\"book\\">예약</button>\\n\\n<p>{{ canBook ? \'\' : \'오는 편 날짜는 가는 편 날짜 이후여야 합니다.\' }}</p>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#flight"},"form-bindings":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'수정해보세요\')\\n    const checked = ref(true)\\n    const checkedNames = ref([\'철수\'])\\n    const picked = ref(\'서울\')\\n    const selected = ref(\'가\')\\n    const multiSelected = ref([\'무궁화\'])\\n\\n    return {\\n      text,\\n      checked,\\n      checkedNames,\\n      picked,\\n      selected,\\n      multiSelected\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'수정해보세요\',\\n      checked: true,\\n      checkedNames: [\'철수\'],\\n      picked: \'서울\',\\n      selected: \'가\',\\n      multiSelected: [\'무궁화\']\\n    }\\n  }\\n}\\n","template.html":"<h2>텍스트 입력</h2>\\n<input v-model=\\"text\\"> {{ text }}\\n\\n<h2>체크박스</h2>\\n<input type=\\"checkbox\\" id=\\"checkbox\\" v-model=\\"checked\\">\\n<label for=\\"checkbox\\">체크됨: {{ checked }}</label>\\n\\n\x3c!--\\n  여러 체크박스 값을 v-model을 사용하여\\n  하나의 배열에 바인딩할 수 있습니다.\\n--\x3e\\n<h2>멀티 체크박스</h2>\\n<input type=\\"checkbox\\" id=\\"chulsoo\\" value=\\"철수\\" v-model=\\"checkedNames\\">\\n<label for=\\"chulsoo\\">철수</label>\\n<input type=\\"checkbox\\" id=\\"yuri\\" value=\\"유리\\" v-model=\\"checkedNames\\">\\n<label for=\\"yuri\\">유리</label>\\n<input type=\\"checkbox\\" id=\\"maenggu\\" value=\\"맹구\\" v-model=\\"checkedNames\\">\\n<label for=\\"maenggu\\">맹구</label>\\n<p>체크된 이름: <pre>{{ checkedNames }}</pre></p>\\n\\n<h2>라디오</h2>\\n<input type=\\"radio\\" id=\\"seoul\\" value=\\"서울\\" v-model=\\"picked\\">\\n<label for=\\"seoul\\">서울</label>\\n<br>\\n<input type=\\"radio\\" id=\\"busan\\" value=\\"부산\\" v-model=\\"picked\\">\\n<label for=\\"busan\\">부산</label>\\n<br>\\n<span>고른것: {{ picked }}</span>\\n\\n<h2>선택</h2>\\n<select v-model=\\"selected\\">\\n  <option disabled value=\\"\\">하나를 선택하세요</option>\\n  <option>가</option>\\n  <option>나</option>\\n  <option>다</option>\\n</select>\\n<span>선택함: {{ selected }}</span>\\n\\n<h2>복수 선택</h2>\\n<select v-model=\\"multiSelected\\" multiple style=\\"width:100px\\">\\n  <option>무궁화</option>\\n  <option>진달래</option>\\n  <option>개나리</option>\\n</select>\\n<span>선택함: {{ multiSelected }}</span>\\n"},"description.txt":"v-model 디렉티브를 사용하여 상태와 폼 입력 간에 양방향 바인딩을 만들 수 있습니다."},"grid":{"App":{"composition.js":"import DemoGrid from \'./Grid.vue\'\\nimport { ref } from \'vue\'\\n\\nexport default {\\n  components: {\\n    DemoGrid\\n  },\\n  setup() {\\n    const searchQuery = ref(\'\')\\n    const gridColumns = [\'name\', \'power\']\\n    const gridData = [\\n      { name: \'손오공\', power: Infinity },\\n      { name: \'이소룡\', power: 9000 },\\n      { name: \'성룡\', power: 7000 },\\n      { name: \'이연걸\', power: 8000 }\\n    ]\\n\\n    return {\\n      searchQuery,\\n      gridColumns,\\n      gridData\\n    }\\n  }\\n}\\n","options.js":"import DemoGrid from \'./Grid.vue\'\\n\\nexport default {\\n  components: {\\n    DemoGrid\\n  },\\n  data: () => ({\\n    searchQuery: \'\',\\n    gridColumns: [\'name\', \'power\'],\\n    gridData: [\\n      { name: \'손오공\', power: Infinity },\\n      { name: \'이소룡\', power: 9000 },\\n      { name: \'성룡\', power: 7000 },\\n      { name: \'이연걸\', power: 8000 }\\n    ]\\n  })\\n}\\n","template.html":"<form id=\\"search\\" @submit.prevent>\\n  검색 <input name=\\"query\\" v-model=\\"searchQuery\\">\\n</form>\\n<DemoGrid\\n  :data=\\"gridData\\"\\n  :columns=\\"gridColumns\\"\\n  :filter-key=\\"searchQuery\\">\\n</DemoGrid>\\n"},"Grid":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  props: {\\n    data: Array,\\n    columns: Array,\\n    filterKey: String\\n  },\\n  setup(props) {\\n    const sortKey = ref(\'\')\\n    const sortOrders = ref(\\n      props.columns.reduce((o, key) => ((o[key] = 1), o), {})\\n    )\\n\\n    const filteredData = computed(() => {\\n      let { data, filterKey } = props\\n      if (filterKey) {\\n        filterKey = filterKey.toLowerCase()\\n        data = data.filter((row) => {\\n          return Object.keys(row).some((key) => {\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\n          })\\n        })\\n      }\\n      const key = sortKey.value\\n      if (key) {\\n        const order = sortOrders.value[key]\\n        data = data.slice().sort((a, b) => {\\n          a = a[key]\\n          b = b[key]\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\n        })\\n      }\\n      return data\\n    })\\n\\n    function sortBy(key) {\\n      sortKey.value = key\\n      sortOrders.value[key] *= -1\\n    }\\n\\n    function capitalize(str) {\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\n    }\\n\\n    return {\\n      sortKey,\\n      sortOrders,\\n      filteredData,\\n      sortBy,\\n      capitalize\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    data: Array,\\n    columns: Array,\\n    filterKey: String\\n  },\\n  data() {\\n    return {\\n      sortKey: \'\',\\n      sortOrders: this.columns.reduce((o, key) => ((o[key] = 1), o), {})\\n    }\\n  },\\n  computed: {\\n    filteredData() {\\n      const sortKey = this.sortKey\\n      const filterKey = this.filterKey && this.filterKey.toLowerCase()\\n      const order = this.sortOrders[sortKey] || 1\\n      let data = this.data\\n      if (filterKey) {\\n        data = data.filter((row) => {\\n          return Object.keys(row).some((key) => {\\n            return String(row[key]).toLowerCase().indexOf(filterKey) > -1\\n          })\\n        })\\n      }\\n      if (sortKey) {\\n        data = data.slice().sort((a, b) => {\\n          a = a[sortKey]\\n          b = b[sortKey]\\n          return (a === b ? 0 : a > b ? 1 : -1) * order\\n        })\\n      }\\n      return data\\n    }\\n  },\\n  methods: {\\n    sortBy(key) {\\n      this.sortKey = key\\n      this.sortOrders[key] = this.sortOrders[key] * -1\\n    },\\n    capitalize(str) {\\n      return str.charAt(0).toUpperCase() + str.slice(1)\\n    }\\n  }\\n}\\n","style.css":"table {\\n  border: 2px solid #42b983;\\n  border-radius: 3px;\\n  background-color: #fff;\\n}\\n\\nth {\\n  background-color: #42b983;\\n  color: rgba(255, 255, 255, 0.66);\\n  cursor: pointer;\\n  user-select: none;\\n}\\n\\ntd {\\n  background-color: #f9f9f9;\\n}\\n\\nth,\\ntd {\\n  min-width: 120px;\\n  padding: 10px 20px;\\n}\\n\\nth.active {\\n  color: #fff;\\n}\\n\\nth.active .arrow {\\n  opacity: 1;\\n}\\n\\n.arrow {\\n  display: inline-block;\\n  vertical-align: middle;\\n  width: 0;\\n  height: 0;\\n  margin-left: 5px;\\n  opacity: 0.66;\\n}\\n\\n.arrow.asc {\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-bottom: 4px solid #fff;\\n}\\n\\n.arrow.dsc {\\n  border-left: 4px solid transparent;\\n  border-right: 4px solid transparent;\\n  border-top: 4px solid #fff;\\n}\\n","template.html":"<table v-if=\\"filteredData.length\\">\\n  <thead>\\n    <tr>\\n      <th v-for=\\"key in columns\\"\\n        @click=\\"sortBy(key)\\"\\n        :class=\\"{ active: sortKey == key }\\">\\n        {{ capitalize(key) }}\\n        <span class=\\"arrow\\" :class=\\"sortOrders[key] > 0 ? \'asc\' : \'dsc\'\\">\\n        </span>\\n      </th>\\n    </tr>\\n  </thead>\\n  <tbody>\\n    <tr v-for=\\"entry in filteredData\\">\\n      <td v-for=\\"key in columns\\">\\n        {{entry[key]}}\\n      </td>\\n    </tr>\\n  </tbody>\\n</table>\\n<p v-else>검색 결과가 없습니다.</p>\\n"},"description.txt":"재사용 가능한 그리드 컴포넌트를 생성하고, 외부 데이터와 함께 사용하는 예제입니다."},"handling-input":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const message = ref(\'안녕 Vue!\')\\n\\n    function reverseMessage() {\\n      // .value 속성을 통해 ref 값에 접근/변경합니다.\\n      message.value = message.value.split(\'\').reverse().join(\'\')\\n    }\\n\\n    function notify() {\\n      alert(\'탐색이 금지되었습니다.\')\\n    }\\n\\n    return {\\n      message,\\n      reverseMessage,\\n      notify\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'안녕 Vue!\'\\n    }\\n  },\\n  methods: {\\n    reverseMessage() {\\n      this.message = this.message.split(\'\').reverse().join(\'\')\\n    },\\n    notify() {\\n      alert(\'탐색이 금지되었습니다.\')\\n    }\\n  }\\n}\\n","style.css":"button, a {\\n  display: block;\\n  margin-bottom: 1em;\\n}\\n","template.html":"\x3c!--\\n  컴포지션 API 스타일의 경우,\\n  ref는 템플릿에서 자동으로 \\"언래핑\\"되므로\\n  템플릿 내에서 .value가 필요하지 않습니다.\\n--\x3e\\n<h1>{{ message }}</h1>\\n\\n\x3c!--\\n  메서드/함수에 바인딩합니다.\\n  @click 문법은 v-on:click의 줄임말입니다.\\n--\x3e\\n<button @click=\\"reverseMessage\\">메시지 뒤집기</button>\\n\\n\x3c!-- 인라인 표현식 문장이 될 수도 있습니다 --\x3e\\n<button @click=\\"message += \'!\'\\">\\"!\\" 추가하기</button>\\n\\n\x3c!--\\n  Vue는 e.preventDefault() 및 e.stopPropagation()과 같은\\n  일반적인 작업에 대한 수식어를 제공합니다.\\n--\x3e\\n<a href=\\"https://vuejs.org\\" @click.prevent=\\"notify\\">\\n  e.preventDefault()가 작동하는 링크\\n</a>\\n"},"description.txt":"이 예제는 v-on 디렉티브로 사용자 입력을 처리하는 방법을 보여줍니다."},"hello-world":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // \\"ref\\"는 값을 저장하는 반응형 데이터 소스입니다.\\n    // 기술적으로 문자열을 표시하기 위해\\n    // ref()로 문자열을 래핑할 필요는 없지만,\\n    // 값을 변경하려는 경우, 왜 래핑이 필요한지\\n    // 다음 예제에서 알게 됩니다.\\n    const message = ref(\'안녕 Vue!\')\\n\\n    return {\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'안녕 Vue!\'\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n"},"description.txt":"Vue로 \\"안녕 Vue!\\"라고 말해보세요!"},"list-transition":{"App":{"composition.js":"import { shuffle as _shuffle } from \'lodash-es\'\\nimport { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const getInitialItems = () => [1, 2, 3, 4, 5]\\n    const items = ref(getInitialItems())\\n    let id = items.value.length + 1\\n\\n    function insert() {\\n      const i = Math.round(Math.random() * items.value.length)\\n      items.value.splice(i, 0, id++)\\n    }\\n\\n    function reset() {\\n      items.value = getInitialItems()\\n    }\\n\\n    function shuffle() {\\n      items.value = _shuffle(items.value)\\n    }\\n\\n    function remove(item) {\\n      const i = items.value.indexOf(item)\\n      if (i > -1) {\\n        items.value.splice(i, 1)\\n      }\\n    }\\n\\n    return {\\n      items,\\n      insert,\\n      reset,\\n      shuffle,\\n      remove\\n    }\\n  }\\n}\\n","options.js":"import { shuffle } from \'lodash-es\'\\n\\nconst getInitialItems = () => [1, 2, 3, 4, 5]\\nlet id = getInitialItems().length + 1\\n\\nexport default {\\n  data() {\\n    return {\\n      items: getInitialItems()\\n    }\\n  },\\n  methods: {\\n    insert() {\\n      const i = Math.round(Math.random() * this.items.length)\\n      this.items.splice(i, 0, id++)\\n    },\\n    reset() {\\n      this.items = getInitialItems()\\n    },\\n    shuffle() {\\n      this.items = shuffle(this.items)\\n    },\\n    remove(item) {\\n      const i = this.items.indexOf(item)\\n      if (i > -1) {\\n        this.items.splice(i, 1)\\n      }\\n    }\\n  }\\n}\\n","style.css":".container {\\n  position: relative;\\n  padding: 0;\\n}\\n\\n.item {\\n  width: 100%;\\n  height: 30px;\\n  background-color: #f3f3f3;\\n  border: 1px solid #666;\\n  box-sizing: border-box;\\n}\\n\\n/* 1. 트랜지션 선언 */\\n.fade-move,\\n.fade-enter-active,\\n.fade-leave-active {\\n  transition: all 0.5s cubic-bezier(0.55, 0, 0.1, 1);\\n}\\n\\n/* 2. 진입 및 진출 상태 선언 */\\n.fade-enter-from,\\n.fade-leave-to {\\n  opacity: 0;\\n  transform: scaleY(0.01) translate(30px, 0);\\n}\\n\\n/* 3. 진출하는 리스트 아이템이 레이아웃에서 제외되어,\\n      움직이는 아이템들이 올바르게 계산되도록 합니다. */\\n.fade-leave-active {\\n  position: absolute;\\n}\\n","template.html":"<button @click=\\"insert\\">임의의 인덱스에 삽입</button>\\n<button @click=\\"reset\\">초기화</button>\\n<button @click=\\"shuffle\\">섞기</button>\\n\\n<TransitionGroup tag=\\"ul\\" name=\\"fade\\" class=\\"container\\">\\n  <div v-for=\\"item in items\\" class=\\"item\\" :key=\\"item\\">\\n    {{ item }}\\n    <button @click=\\"remove(item)\\">x</button>\\n  </div>\\n</TransitionGroup>\\n"},"description.txt":"빌트인 컴포넌트인 <TransitionGroup>으로 FLIP 리스트 변환 효과를 구현한 예제입니다.\\nFLIP 알아보기: https://aerotwist.com/blog/flip-your-animations/","import-map.json":"{\\n  \\"imports\\": {\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\n  }\\n}\\n"},"markdown":{"App":{"composition.js":"import { marked } from \'marked\'\\nimport { debounce } from \'lodash-es\'\\nimport { ref, computed } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const input = ref(\'# 반가워요!\')\\n\\n    const output = computed(() => marked(input.value))\\n\\n    const update = debounce((e) => {\\n      input.value = e.target.value\\n    }, 100)\\n\\n    return {\\n      input,\\n      output,\\n      update\\n    }\\n  }\\n}\\n","options.js":"import { marked } from \'marked\'\\nimport { debounce } from \'lodash-es\'\\n\\nexport default {\\n  data: () => ({\\n    input: \'# 반가워요!\'\\n  }),\\n  computed: {\\n    output() {\\n      return marked(this.input)\\n    }\\n  },\\n  methods: {\\n    update: debounce(function (e) {\\n      this.input = e.target.value\\n    }, 100)\\n  }\\n}\\n","style.css":"body {\\n  margin: 0;\\n}\\n\\n.editor {\\n  height: 100vh;\\n  display: flex;\\n}\\n\\n.input,\\n.output {\\n  overflow: auto;\\n  width: 50%;\\n  height: 100%;\\n  box-sizing: border-box;\\n  padding: 0 20px;\\n}\\n\\n.input {\\n  border: none;\\n  border-right: 1px solid #ccc;\\n  resize: none;\\n  outline: none;\\n  background-color: #f6f6f6;\\n  font-size: 14px;\\n  font-family: \'Monaco\', courier, monospace;\\n  padding: 20px;\\n}\\n\\ncode {\\n  color: #f66;\\n}\\n","template.html":"<div class=\\"editor\\">\\n  <textarea class=\\"input\\" :value=\\"input\\" @input=\\"update\\"></textarea>\\n  <div class=\\"output\\" v-html=\\"output\\"></div>\\n</div>\\n"},"description.txt":"심플한 마크다운 편집기 입니다.","import-map.json":"{\\n  \\"imports\\": {\\n    \\"marked\\": \\"https://cdn.jsdelivr.net/npm/marked/+esm\\",\\n    \\"lodash-es\\": \\"https://cdn.jsdelivr.net/npm/lodash-es/+esm\\"\\n  }\\n}\\n"},"modal":{"App":{"composition.js":"import Modal from \'./Modal.vue\'\\nimport { ref } from \'vue\'\\n\\nexport default {\\n  components: {\\n    Modal\\n  },\\n  setup() {\\n    const showModal = ref(false)\\n\\n    return {\\n      showModal\\n    }\\n  }\\n}\\n","options.js":"import Modal from \'./Modal.vue\'\\n\\nexport default {\\n  components: {\\n    Modal\\n  },\\n  data() {\\n    return {\\n      showModal: false\\n    }\\n  }\\n}\\n","template.html":"<button id=\\"show-modal\\" @click=\\"showModal = true\\">모달 열기</button>\\n\\n\x3c!--\\n  Vue 가상 DOM 구조에서\\n  모달 컴포넌트는 현재 컴포넌트의 자식이지만,\\n  <body> 태그에 위치합니다.\\n--\x3e\\n<Teleport to=\\"body\\">\\n  \x3c!-- prop을 전달하는 모달 컴포넌트를 사용합니다 --\x3e\\n  <modal :show=\\"showModal\\" @close=\\"showModal = false\\">\\n    \x3c!-- name 속성 값이 \\"header\\"인 슬롯에 전달될 컨텐츠 --\x3e\\n    <template #header>\\n      <h3>커스텀 해더</h3>\\n    </template>\\n  </modal>\\n</Teleport>\\n"},"Modal":{"composition.js":"export default {\\n  props: {\\n    show: Boolean\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    show: Boolean\\n  }\\n}\\n","style.css":".modal-mask {\\n  position: fixed;\\n  z-index: 9998;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n  background-color: rgba(0, 0, 0, 0.5);\\n  display: table;\\n  transition: opacity 0.3s ease;\\n}\\n\\n.modal-wrapper {\\n  display: table-cell;\\n  vertical-align: middle;\\n}\\n\\n.modal-container {\\n  width: 300px;\\n  margin: 0px auto;\\n  padding: 20px 30px;\\n  background-color: #fff;\\n  border-radius: 2px;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.33);\\n  transition: all 0.3s ease;\\n}\\n\\n.modal-header h3 {\\n  margin-top: 0;\\n  color: #42b983;\\n}\\n\\n.modal-body {\\n  margin: 20px 0;\\n}\\n\\n.modal-default-button {\\n  float: right;\\n}\\n\\n/*\\n * The following styles are auto-applied to elements with\\n * transition=\\"modal\\" when their visibility is toggled\\n * by Vue.js.\\n *\\n * You can easily play with the modal transition by editing\\n * these styles.\\n */\\n\\n.modal-enter-from {\\n  opacity: 0;\\n}\\n\\n.modal-leave-to {\\n  opacity: 0;\\n}\\n\\n.modal-enter-from .modal-container,\\n.modal-leave-to .modal-container {\\n  -webkit-transform: scale(1.1);\\n  transform: scale(1.1);\\n}\\n","template.html":"<Transition name=\\"modal\\">\\n  <div v-if=\\"show\\" class=\\"modal-mask\\">\\n    <div class=\\"modal-wrapper\\">\\n      <div class=\\"modal-container\\">\\n        <div class=\\"modal-header\\">\\n          <slot name=\\"header\\">기본 해더</slot>\\n        </div>\\n\\n        <div class=\\"modal-body\\">\\n          <slot name=\\"body\\">기본 컨텐츠</slot>\\n        </div>\\n\\n        <div class=\\"modal-footer\\">\\n          <slot name=\\"footer\\">\\n            기본 푸터\\n            <button\\n              class=\\"modal-default-button\\"\\n              @click=\\"$emit(\'close\')\\"\\n            >확인</button>\\n          </slot>\\n        </div>\\n      </div>\\n    </div>\\n  </div>\\n</Transition>\\n"},"description.txt":"커스텀 가능한 슬롯 및 CSS 트랜지션이 있는 모달 컴포넌트\\n"},"simple-component":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ListItem from \'./ListItem.vue\'\\n\\nexport default {\\n  components: {\\n    ListItem\\n  },\\n  setup() {\\n    const groceryList = ref([\\n      { id: 0, text: \'채소\' },\\n      { id: 1, text: \'치즈\' },\\n      { id: 2, text: \'인간이 먹을 수 있는 모든 것\' }\\n    ])\\n\\n    return {\\n      groceryList\\n    }\\n  }\\n}\\n","options.js":"import ListItem from \'./ListItem.vue\'\\n\\nexport default {\\n  components: {\\n    ListItem\\n  },\\n  data() {\\n    return {\\n      groceryList: [\\n        { id: 0, text: \'채소\' },\\n        { id: 1, text: \'치즈\' },\\n        { id: 2, text: \'인간이 먹을 수 있는 모든 것\' }\\n      ]\\n    }\\n  }\\n}\\n","template.html":"<ol>\\n  \x3c!--\\n    item 객체를 제공하여 list-item이\\n    컨텐츠를 동적으로 나타낼 수 있도록 합니다.\\n    그리고 컴포넌트에 \\"key\\"를 제공해야 하는데,\\n     \\"리스트 렌더링\\" 가이드에 설명되어 있습니다.\\n  --\x3e\\n  <ListItem\\n    v-for=\\"item in groceryList\\"\\n    :todo=\\"item\\"\\n    :key=\\"item.id\\"\\n  ></ListItem>\\n</ol>\\n"},"ListItem":{"composition.js":"export default {\\n  props: {\\n    todo: Object\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    todo: Object\\n  }\\n}\\n","template.html":"<li>{{ todo.text }}</li>\\n"},"description.txt":"여기서는 prop을 전달받아 렌더링하는 가장 단순한 컴포넌트를 보여줍니다.\\n가이드에서 컴포넌트에 대해 자세히 알아보세요!"},"svg":{"App":{"composition.js":"import PolyGraph from \'./PolyGraph.vue\'\\nimport { ref, reactive } from \'vue\'\\n\\nexport default {\\n  components: {\\n    PolyGraph\\n  },\\n  setup() {\\n    const newLabel = ref(\'\')\\n    const stats = reactive([\\n      { label: \'A\', value: 100 },\\n      { label: \'B\', value: 100 },\\n      { label: \'C\', value: 100 },\\n      { label: \'D\', value: 100 },\\n      { label: \'E\', value: 100 },\\n      { label: \'F\', value: 100 }\\n    ])\\n\\n    function add(e) {\\n      e.preventDefault()\\n      if (!newLabel.value) return\\n      stats.push({\\n        label: newLabel.value,\\n        value: 100\\n      })\\n      newLabel.value = \'\'\\n    }\\n\\n    function remove(stat) {\\n      if (stats.length > 3) {\\n        stats.splice(stats.indexOf(stat), 1)\\n      } else {\\n        alert(\\"더 이상 삭제할 수 없습니다!\\")\\n      }\\n    }\\n\\n    return {\\n      newLabel,\\n      stats,\\n      add,\\n      remove\\n    }\\n  }\\n}\\n","options.js":"import PolyGraph from \'./PolyGraph.vue\'\\n\\nexport default {\\n  components: {\\n    PolyGraph\\n  },\\n  data: () => ({\\n    newLabel: \'\',\\n    stats: [\\n      { label: \'A\', value: 100 },\\n      { label: \'B\', value: 100 },\\n      { label: \'C\', value: 100 },\\n      { label: \'D\', value: 100 },\\n      { label: \'E\', value: 100 },\\n      { label: \'F\', value: 100 }\\n    ]\\n  }),\\n  methods: {\\n    add(e) {\\n      e.preventDefault()\\n      if (!this.newLabel) return\\n      this.stats.push({\\n        label: this.newLabel,\\n        value: 100\\n      })\\n      this.newLabel = \'\'\\n    },\\n    remove(stat) {\\n      if (this.stats.length > 3) {\\n        this.stats.splice(this.stats.indexOf(stat), 1)\\n      } else {\\n        alert(\\"더 이상 삭제할 수 없습니다!\\")\\n      }\\n    }\\n  }\\n}\\n","style.css":"polygon {\\n  fill: #42b983;\\n  opacity: 0.75;\\n}\\n\\ncircle {\\n  fill: transparent;\\n  stroke: #999;\\n}\\n\\ntext {\\n  font-size: 10px;\\n  fill: #666;\\n}\\n\\nlabel {\\n  display: inline-block;\\n  margin-left: 10px;\\n  width: 20px;\\n}\\n\\n#raw {\\n  position: absolute;\\n  top: 0;\\n  left: 300px;\\n}\\n","template.html":"\x3c!-- 그래프 --\x3e\\n<svg width=\\"200\\" height=\\"200\\">\\n  <PolyGraph :stats=\\"stats\\"></PolyGraph>\\n</svg>\\n\\n\x3c!-- 컨트롤러 --\x3e\\n<div v-for=\\"stat in stats\\">\\n  <label>{{stat.label}}</label>\\n  <input type=\\"range\\" v-model=\\"stat.value\\" min=\\"0\\" max=\\"100\\">\\n  <span>{{stat.value}}</span>\\n  <button @click=\\"remove(stat)\\" class=\\"remove\\">X</button>\\n</div>\\n\\n\x3c!-- 입력 폼 --\x3e\\n<form id=\\"add\\">\\n  <input name=\\"newlabel\\" v-model=\\"newLabel\\">\\n  <button @click=\\"add\\">스탯 추가</button>\\n</form>\\n\\n\x3c!-- 스탯 배열 시각적인 출력 --\x3e\\n<pre id=\\"raw\\">{{ stats }}</pre>\\n"},"AxisLabel":{"composition.js":"import { computed } from \'vue\'\\nimport { valueToPoint } from \'./util.js\'\\n\\nexport default {\\n  props: {\\n    stat: Object,\\n    index: Number,\\n    total: Number\\n  },\\n  setup(props) {\\n    const point = computed(() =>\\n      valueToPoint(+props.stat.value + 10, props.index, props.total)\\n    )\\n\\n    return {\\n      point\\n    }\\n  }\\n}\\n","options.js":"import { valueToPoint } from \'./util.js\'\\n\\nexport default {\\n  props: {\\n    stat: Object,\\n    index: Number,\\n    total: Number\\n  },\\n  computed: {\\n    point: function () {\\n      return valueToPoint(+this.stat.value + 10, this.index, this.total)\\n    }\\n  }\\n}\\n","template.html":"<text :x=\\"point.x\\" :y=\\"point.y\\">{{stat.label}}</text>\\n"},"PolyGraph":{"composition.js":"import AxisLabel from \'./AxisLabel.vue\'\\nimport { computed } from \'vue\'\\nimport { valueToPoint } from \'./util.js\'\\n\\nexport default {\\n  components: {\\n    AxisLabel\\n  },\\n  props: {\\n    stats: Array\\n  },\\n  setup(props) {\\n    // polygon 태그의 points 속성에 적용할 계산된 속성\\n    const points = computed(() => {\\n      const total = props.stats.length\\n      return props.stats\\n        .map((stat, i) => {\\n          const { x, y } = valueToPoint(stat.value, i, total)\\n          return `${x},${y}`\\n        })\\n        .join(\' \')\\n    })\\n\\n    return {\\n      points\\n    }\\n  }\\n}\\n","options.js":"import AxisLabel from \'./AxisLabel.vue\'\\nimport { valueToPoint } from \'./util.js\'\\n\\nexport default {\\n  components: {\\n    AxisLabel\\n  },\\n  props: {\\n    stats: Array\\n  },\\n  computed: {\\n    // polygon 태그의 points 속성에 적용할 계산된 속성\\n    points() {\\n      const total = this.stats.length\\n      return this.stats\\n        .map((stat, i) => {\\n          const { x, y } = valueToPoint(stat.value, i, total)\\n          return `${x},${y}`\\n        })\\n        .join(\' \')\\n    }\\n  }\\n}\\n","template.html":"<g>\\n  <polygon :points=\\"points\\"></polygon>\\n  <circle cx=\\"100\\" cy=\\"100\\" r=\\"80\\"></circle>\\n  <axis-label\\n    v-for=\\"(stat, index) in stats\\"\\n    :stat=\\"stat\\"\\n    :index=\\"index\\"\\n    :total=\\"stats.length\\"\\n  >\\n  </axis-label>\\n</g>\\n"},"description.txt":"부모 컴포넌트에서 스탯(stats) 배열을\\n자식 컴포넌트에게 전달하여 그래프를 그립니다.\\n컴포넌트 간 공통으로 사용하는 로직은\\n재사용성을 위해 컴포저블 함수로 되어있습니다.","util.js":"export function valueToPoint(value, index, total) {\\n  const x = 0\\n  const y = -value * 0.8\\n  const angle = ((Math.PI * 2) / total) * index\\n  const cos = Math.cos(angle)\\n  const sin = Math.sin(angle)\\n  const tx = x * cos - y * sin + 100\\n  const ty = x * sin + y * cos + 100\\n  return {\\n    x: tx,\\n    y: ty\\n  }\\n}\\n"},"temperature-converter":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const c = ref(0)\\n    const f = ref(32)\\n\\n    function setC(e, v = +e.target.value) {\\n      c.value = v\\n      f.value = v * (9 / 5) + 32\\n    }\\n\\n    function setF(e, v = +e.target.value) {\\n      f.value = v\\n      c.value = (v - 32) * (5 / 9)\\n    }\\n\\n    return {\\n      c,\\n      f,\\n      setC,\\n      setF\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      c: 0,\\n      f: 32\\n    }\\n  },\\n  methods: {\\n    setC(e, c = +e.target.value) {\\n      this.c = c\\n      this.f = c * (9 / 5) + 32\\n    },\\n    setF(e, f = +e.target.value) {\\n      this.f = f\\n      this.c = (f - 32) * (5 / 9)\\n    }\\n  }\\n}\\n","template.html":"<input type=\\"number\\" :value=\\"c\\" @change=\\"setC\\"> 섭씨 =\\n<input type=\\"number\\" :value=\\"f\\" @change=\\"setF\\"> 화씨\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#temp"},"timer":{"App":{"composition.js":"import { ref, onUnmounted } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const duration = ref(15 * 1000)\\n    const elapsed = ref(0)\\n\\n    let lastTime = performance.now()\\n    let handle\\n    const update = () => {\\n      const time = performance.now()\\n      elapsed.value += Math.min(time - lastTime, duration.value - elapsed.value)\\n      lastTime = time\\n      handle = requestAnimationFrame(update)\\n    }\\n\\n    update()\\n    onUnmounted(() => {\\n      cancelAnimationFrame(handle)\\n    })\\n\\n    return {\\n      duration,\\n      elapsed\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      duration: 15 * 1000,\\n      elapsed: 0\\n    }\\n  },\\n  created() {\\n    let lastTime = performance.now()\\n    const update = () => {\\n      const time = performance.now()\\n      this.elapsed += Math.min(time - lastTime, this.duration - this.elapsed)\\n      lastTime = time\\n      this.handle = requestAnimationFrame(update)\\n    }\\n    update()\\n  },\\n  unmounted() {\\n    cancelAnimationFrame(this.handle)\\n  }\\n}\\n","style.css":".elapsed-container {\\n  width: 300px;\\n}\\n\\n.elapsed-bar {\\n  background-color: red;\\n  height: 10px;\\n}\\n","template.html":"<label\\n  >경과 시간: <progress :value=\\"elapsed / duration\\"></progress\\n></label>\\n\\n<div>{{ (elapsed / 1000).toFixed(1) }} 초</div>\\n\\n<div>\\n  설정: <input type=\\"range\\" v-model=\\"duration\\" min=\\"1\\" max=\\"30000\\">\\n  {{ (duration / 1000).toFixed(1) }} 초\\n</div>\\n\\n<button @click=\\"elapsed = 0\\">초기화</button>\\n"},"description.txt":"https://eugenkiss.github.io/7guis/tasks/#timer"},"todomvc":{"App":{"composition.js":"import { ref, computed, watchEffect } from \'vue\'\\n\\nconst STORAGE_KEY = \'vue-todomvc\'\\n\\nconst filters = {\\n  all: (todos) => todos,\\n  active: (todos) => todos.filter((todo) => !todo.completed),\\n  completed: (todos) => todos.filter((todo) => todo.completed)\\n}\\n\\nexport default {\\n  setup() {\\n    // 상태\\n    const todos = ref(JSON.parse(localStorage.getItem(STORAGE_KEY) || \'[]\'))\\n    const visibility = ref(\'all\')\\n    const editedTodo = ref()\\n\\n    // 파생된 상태(계산된 속성)\\n    const filteredTodos = computed(() => filters[visibility.value](todos.value))\\n    const remaining = computed(() => filters.active(todos.value).length)\\n\\n    // 라우팅 핸들링\\n    window.addEventListener(\'hashchange\', onHashChange)\\n    onHashChange()\\n\\n    // 상태 저장\\n    watchEffect(() => {\\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(todos.value))\\n    })\\n\\n    function toggleAll(e) {\\n      todos.value.forEach((todo) => (todo.completed = e.target.checked))\\n    }\\n\\n    function addTodo(e) {\\n      const value = e.target.value.trim()\\n      if (value) {\\n        todos.value.push({\\n          id: Date.now(),\\n          title: value,\\n          completed: false\\n        })\\n        e.target.value = \'\'\\n      }\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value.splice(todos.value.indexOf(todo), 1)\\n    }\\n\\n    let beforeEditCache = \'\'\\n    function editTodo(todo) {\\n      beforeEditCache = todo.title\\n      editedTodo.value = todo\\n    }\\n\\n    function cancelEdit(todo) {\\n      editedTodo.value = null\\n      todo.title = beforeEditCache\\n    }\\n\\n    function doneEdit(todo) {\\n      if (editedTodo.value) {\\n        editedTodo.value = null\\n        todo.title = todo.title.trim()\\n        if (!todo.title) removeTodo(todo)\\n      }\\n    }\\n\\n    function removeCompleted() {\\n      todos.value = filters.active(todos.value)\\n    }\\n\\n    function onHashChange() {\\n      const route = window.location.hash.replace(/#\\\\/?/, \'\')\\n      if (filters[route]) {\\n        visibility.value = route\\n      } else {\\n        window.location.hash = \'\'\\n        visibility.value = \'all\'\\n      }\\n    }\\n\\n    return {\\n      todos,\\n      visibility,\\n      editedTodo,\\n      filteredTodos,\\n      remaining,\\n      toggleAll,\\n      addTodo,\\n      removeTodo,\\n      editTodo,\\n      doneEdit,\\n      cancelEdit,\\n      removeCompleted,\\n    }\\n  }\\n}\\n","options.js":"const STORAGE_KEY = \'vue-todomvc\'\\n\\nconst filters = {\\n  all: (todos) => todos,\\n  active: (todos) => todos.filter((todo) => !todo.completed),\\n  completed: (todos) => todos.filter((todo) => todo.completed)\\n}\\n\\nexport default {\\n  // 상태 초기화\\n  data: () => ({\\n    todos: JSON.parse(localStorage.getItem(STORAGE_KEY) || \'[]\'),\\n    editedTodo: null,\\n    visibility: \'all\'\\n  }),\\n\\n  // todos의 변경사항을 감지하여 localStorage에 저장\\n  watch: {\\n    todos: {\\n      handler(todos) {\\n        localStorage.setItem(STORAGE_KEY, JSON.stringify(todos))\\n      },\\n      deep: true\\n    }\\n  },\\n\\n  mounted() {\\n    window.addEventListener(\'hashchange\', this.onHashChange)\\n    this.onHashChange()\\n  },\\n\\n  computed: {\\n    filteredTodos() {\\n      return filters[this.visibility](this.todos)\\n    },\\n    remaining() {\\n      return filters.active(this.todos).length\\n    }\\n  },\\n\\n  // 데이터 로직을 구현하는 메서드.\\n  // 여기에는 DOM 조작이 전혀 없습니다.\\n  methods: {\\n    toggleAll(e) {\\n      this.todos.forEach((todo) => (todo.completed = e.target.checked))\\n    },\\n\\n    addTodo(e) {\\n      const value = e.target.value.trim()\\n      if (!value) {\\n        return\\n      }\\n      this.todos.push({\\n        id: Date.now(),\\n        title: value,\\n        completed: false\\n      })\\n      e.target.value = \'\'\\n    },\\n\\n    removeTodo(todo) {\\n      this.todos.splice(this.todos.indexOf(todo), 1)\\n    },\\n\\n    editTodo(todo) {\\n      this.beforeEditCache = todo.title\\n      this.editedTodo = todo\\n    },\\n\\n    doneEdit(todo) {\\n      if (!this.editedTodo) {\\n        return\\n      }\\n      this.editedTodo = null\\n      todo.title = todo.title.trim()\\n      if (!todo.title) {\\n        this.removeTodo(todo)\\n      }\\n    },\\n\\n    cancelEdit(todo) {\\n      this.editedTodo = null\\n      todo.title = this.beforeEditCache\\n    },\\n\\n    removeCompleted() {\\n      this.todos = filters.active(this.todos)\\n    },\\n\\n    onHashChange() {\\n      var visibility = window.location.hash.replace(/#\\\\/?/, \'\')\\n      if (filters[visibility]) {\\n        this.visibility = visibility\\n      } else {\\n        window.location.hash = \'\'\\n        this.visibility = \'all\'\\n      }\\n    }\\n  }\\n}\\n","style.css":"@import \\"https://unpkg.com/todomvc-app-css@2.4.1/index.css\\";\\n","template.html":"<section class=\\"todoapp\\">\\n  <header class=\\"header\\">\\n    <h1>해야 할 일</h1>\\n    <input\\n      class=\\"new-todo\\"\\n      autofocus\\n      placeholder=\\"무엇을 해야 하나요?\\"\\n      @keyup.enter=\\"addTodo\\"\\n    >\\n  </header>\\n  <section class=\\"main\\" v-show=\\"todos.length\\">\\n    <input\\n      id=\\"toggle-all\\"\\n      class=\\"toggle-all\\"\\n      type=\\"checkbox\\"\\n      :checked=\\"remaining === 0\\"\\n      @change=\\"toggleAll\\"\\n    >\\n    <label for=\\"toggle-all\\">모두 완료로 표시</label>\\n    <ul class=\\"todo-list\\">\\n      <li\\n        v-for=\\"todo in filteredTodos\\"\\n        class=\\"todo\\"\\n        :key=\\"todo.id\\"\\n        :class=\\"{ completed: todo.completed, editing: todo === editedTodo }\\"\\n      >\\n        <div class=\\"view\\">\\n          <input class=\\"toggle\\" type=\\"checkbox\\" v-model=\\"todo.completed\\">\\n          <label @dblclick=\\"editTodo(todo)\\">{{ todo.title }}</label>\\n          <button class=\\"destroy\\" @click=\\"removeTodo(todo)\\"></button>\\n        </div>\\n        <input\\n          v-if=\\"todo === editedTodo\\"\\n          class=\\"edit\\"\\n          type=\\"text\\"\\n          v-model=\\"todo.title\\"\\n          @vnode-mounted=\\"({ el }) => el.focus()\\"\\n          @blur=\\"doneEdit(todo)\\"\\n          @keyup.enter=\\"doneEdit(todo)\\"\\n          @keyup.escape=\\"cancelEdit(todo)\\"\\n        >\\n      </li>\\n    </ul>\\n  </section>\\n  <footer class=\\"footer\\" v-show=\\"todos.length\\">\\n    <span class=\\"todo-count\\">\\n      <strong>{{ remaining }}</strong>\\n      <span>개 남음</span>\\n    </span>\\n    <ul class=\\"filters\\">\\n      <li>\\n        <a href=\\"#/all\\" :class=\\"{ selected: visibility === \'all\' }\\">전체</a>\\n      </li>\\n      <li>\\n        <a href=\\"#/active\\" :class=\\"{ selected: visibility === \'active\' }\\">해야할 일</a>\\n      </li>\\n      <li>\\n        <a href=\\"#/completed\\" :class=\\"{ selected: visibility === \'completed\' }\\">완료된 일</a>\\n      </li>\\n    </ul>\\n    <button class=\\"clear-completed\\" @click=\\"removeCompleted\\" v-show=\\"todos.length > remaining\\">\\n      완료된 것 삭제\\n    </button>\\n  </footer>\\n</section>\\n"},"description.txt":"완벽히 구현된 TodoMVC\\nhttps://todomvc.com/"},"tree":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport TreeItem from \'./TreeItem.vue\'\\n\\nexport default {\\n  components: {\\n    TreeItem\\n  },\\n  setup() {\\n    const treeData = ref({\\n      name: \'나의 트리\',\\n      children: [\\n        { name: \'안녕\' },\\n        { name: \'반가워\' },\\n        {\\n          name: \'하위 폴더\',\\n          children: [\\n            {\\n              name: \'하위 폴더\',\\n              children: [{ name: \'안녕\' }, { name: \'반가워\' }]\\n            },\\n            { name: \'안녕\' },\\n            { name: \'반가워\' },\\n            {\\n              name: \'하위 폴더\',\\n              children: [{ name: \'안녕\' }, { name: \'반가워\' }]\\n            }\\n          ]\\n        }\\n      ]\\n    })\\n\\n    return {\\n      treeData\\n    }\\n  }\\n}\\n","options.js":"import TreeItem from \'./TreeItem.vue\'\\n\\nconst treeData = {\\n  name: \'나의 트리\',\\n  children: [\\n    { name: \'안녕\' },\\n    { name: \'반가워\' },\\n    {\\n      name: \'하위 폴더\',\\n      children: [\\n        {\\n          name: \'하위 폴더\',\\n          children: [{ name: \'안녕\' }, { name: \'반가워\' }]\\n        },\\n        { name: \'안녕\' },\\n        { name: \'반가워\' },\\n        {\\n          name: \'하위 폴더\',\\n          children: [{ name: \'안녕\' }, { name: \'반가워\' }]\\n        }\\n      ]\\n    }\\n  ]\\n}\\n\\nexport default {\\n  components: {\\n    TreeItem\\n  },\\n  data() {\\n    return {\\n      treeData\\n    }\\n  }\\n}\\n","style.css":".item {\\n  cursor: pointer;\\n  line-height: 1.5;\\n}\\n.bold {\\n  font-weight: bold;\\n}\\n","template.html":"<ul>\\n  <TreeItem class=\\"item\\" :model=\\"treeData\\"></TreeItem>\\n</ul>\\n"},"TreeItem":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  name: \'TreeItem\', // 자기 참조에 필요함\\n  props: {\\n    model: Object\\n  },\\n  setup(props) {\\n    const isOpen = ref(false)\\n    const isFolder = computed(() => {\\n      return props.model.children && props.model.children.length\\n    })\\n\\n    function toggle() {\\n      isOpen.value = !isOpen.value\\n    }\\n\\n    function changeType() {\\n      if (!isFolder.value) {\\n        props.model.children = []\\n        addChild()\\n        isOpen.value = true\\n      }\\n    }\\n\\n    function addChild() {\\n      props.model.children.push({ name: \'새로운 것\' })\\n    }\\n\\n    return {\\n      isOpen,\\n      isFolder,\\n      toggle,\\n      changeType,\\n      addChild\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  name: \'TreeItem\', // 자기 참조에 필요함\\n  props: {\\n    model: Object\\n  },\\n  data() {\\n    return {\\n      isOpen: false\\n    }\\n  },\\n  computed: {\\n    isFolder() {\\n      return this.model.children && this.model.children.length\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      if (this.isFolder) {\\n        this.isOpen = !this.isOpen\\n      }\\n    },\\n    changeType() {\\n      if (!this.isFolder) {\\n        this.model.children = []\\n        this.addChild()\\n        this.isOpen = true\\n      }\\n    },\\n    addChild() {\\n      this.model.children.push({\\n        name: \'새로운 것\'\\n      })\\n    }\\n  }\\n}\\n","template.html":"<li>\\n  <div\\n    :class=\\"{ bold: isFolder }\\"\\n    @click=\\"toggle\\"\\n    @dblclick=\\"changeType\\">\\n    {{ model.name }}\\n    <span v-if=\\"isFolder\\">[{{ isOpen ? \'-\' : \'+\' }}]</span>\\n  </div>\\n  <ul v-show=\\"isOpen\\" v-if=\\"isFolder\\">\\n    \x3c!--\\n      컴포넌트는 \\"name\\" 옵션을 사용하여 자신을 재귀적으로 렌더링할\\n      수 있습니다(SFC를 사용하는 경우 파일 이름에서 유추).\\n    --\x3e\\n    <TreeItem\\n      class=\\"item\\"\\n      v-for=\\"model in model.children\\"\\n      :model=\\"model\\">\\n    </TreeItem>\\n    <li class=\\"add\\" @click=\\"addChild\\">+</li>\\n  </ul>\\n</li>\\n"},"description.txt":"자신을 재귀적으로 렌더링하는 중첩된 트리 컴포넌트입니다.\\n항목을 더블 클릭하면 폴더로 변경됩니다."}}');var h=i(a({__name:"ExampleRepl",setup(i){const a=new n({defaultVueRuntimeURL:`https://unpkg.com/vue@${l}/dist/vue.esm-browser.js`}),h=r("prefer-composition"),f=r("prefer-sfc");function v(){let n=location.hash.slice(1);m.hasOwnProperty(n)||(n="hello-world",location.hash=`#${n}`),a.setFiles(f.value?o(m[n],h.value):s(m[n],h.value),f.value?"App.vue":"index.html")}return d(v),e(v),(n,e)=>(c(),p(u(t),{store:u(a),showImportMap:!u(f),showCompileOutput:!1,clearConsole:!1},null,8,["store","showImportMap"]))}}),[["__scopeId","data-v-ea6125de"]]);export{h as default};
