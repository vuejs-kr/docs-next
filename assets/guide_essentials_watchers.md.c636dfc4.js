import{_ as s,o as l,c as n,a,d as o,e as p}from"./app.ea8bebef.js";const e='{"title":"감시자","description":"","frontmatter":{},"headers":[{"level":2,"title":"기본 예제","slug":"basic-example"},{"level":3,"title":"감시 대상 타입 {https://vuejs.org/guide/essentials/watchers.html#watch-source-types}","slug":"감시-대상-타입"},{"level":2,"title":"깊은 감시자","slug":"deep-watchers"},{"level":2,"title":"열성적인 감시자","slug":"eager-watchers","optionsOnly":true},{"level":2,"title":"watchEffect()","slug":"watcheffect","compositionOnly":true},{"level":3,"title":"watch vs. watchEffect","slug":"watch-vs-watcheffect"},{"level":2,"title":"콜백 실행 타이밍","slug":"callback-flush-timing"},{"level":2,"title":"this.$watch()","slug":"this-watch","optionsOnly":true},{"level":2,"title":"감시자 중지하기","slug":"stopping-a-watcher"}],"relativePath":"guide/essentials/watchers.md"}',c={},t=[a('<h1 id="watchers" tabindex="-1">감시자 <a class="header-anchor" href="#watchers" aria-hidden="true">#</a></h1><h2 id="basic-example" tabindex="-1">기본 예제 <a class="header-anchor" href="#basic-example" aria-hidden="true">#</a></h2><p>계산된 속성은 계산되어 파생된 값을 선언적으로 사용할 수 있게 합니다. 그러나 상태 변경에 대한 반응으로 &quot;사이드 이펙트&quot;(예: DOM을 변경하거나 비동기 작업의 결과를 기반으로 다른 상태를 변경하는 것)를 수행해야 하는 경우가 있습니다.</p><div class="options-api"><p>옵션 API를 사용하는 경우, <a href="/api/options-state.html#watch"><code>watch</code> 옵션</a>을 사용하여 반응형 속성이 변경될 때마다 함수를 실행할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      question</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#F07178;">      answer</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">질문에는 일반적으로 물음표가 포함됩니다.</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 질문이 변경될 때마다 이 함수가 실행됩니다</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">question</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newQuestion</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldQuestion</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">newQuestion</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">indexOf</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">?</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">-</span><span style="color:#F78C6C;">1</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">getAnswer</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">getAnswer</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">answer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">생각 중...</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;font-style:italic;">try</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://yesno.wtf/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">answer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">())</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">answer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">===</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">yes</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">?</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">네</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">아니오</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">catch</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">error</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">answer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">에러! API에 연결할 수 없습니다. </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">+</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">error</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><div class="language-vue-html"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  예/아니오 질문:</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">input</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">v-model</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">question</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> answer </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p><a href="https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdD5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcXVlc3Rpb246ICcnLFxuICAgICAgYW5zd2VyOiAn7KeI66y47JeQ64qUIOydvOuwmOyggeycvOuhnCDrrLzsnYztkZzqsIAg7Y+s7ZWo65Cp64uI64ukLidcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgLy8g7KeI66y47J20IOuzgOqyveuQoCDrlYzrp4jri6Qg7J20IO2VqOyImOqwgCDsi6TtlonrkKnri4jri6RcbiAgICBxdWVzdGlvbihuZXdRdWVzdGlvbiwgb2xkUXVlc3Rpb24pIHtcbiAgICAgIGlmIChuZXdRdWVzdGlvbi5pbmRleE9mKCc/JykgPiAtMSkge1xuICAgICAgICB0aGlzLmdldEFuc3dlcigpXG4gICAgICB9XG4gICAgfVxuICB9LFxuICBtZXRob2RzOiB7XG4gICAgYXN5bmMgZ2V0QW5zd2VyKCkge1xuICAgICAgdGhpcy5hbnN3ZXIgPSAn7IOd6rCBIOykkS4uLidcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKCdodHRwczovL3llc25vLnd0Zi9hcGknKVxuICAgICAgICB0aGlzLmFuc3dlciA9IChhd2FpdCByZXMuanNvbigpKS5hbnN3ZXIgPT09ICd5ZXMnID8gJ+uEpCcgOiAn7JWE64uI7JikJ1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgdGhpcy5hbnN3ZXIgPSAn7Jik66WYISBBUEnsl5Ag7Jew6rKw7ZWgIOyImCDsl4bsirXri4jri6QuICcgKyBlcnJvclxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuPC9zY3JpcHQ+XG5cbjx0ZW1wbGF0ZT5cbiAgPHA+XG4gICAg7JiIL+yVhOuLiOyYpCDsp4jrrLg6XG4gICAgPGlucHV0IHYtbW9kZWw9XCJxdWVzdGlvblwiIC8+XG4gIDwvcD5cbiAgPHA+e3sgYW5zd2VyIH19PC9wPlxuPC90ZW1wbGF0ZT4iLCJpbXBvcnQtbWFwLmpzb24iOiJ7XG4gIFwiaW1wb3J0c1wiOiB7XG4gICAgXCJ2dWVcIjogXCJodHRwczovL3NmYy52dWVqcy5vcmcvdnVlLnJ1bnRpbWUuZXNtLWJyb3dzZXIuanNcIixcbiAgICBcInZ1ZS9zZXJ2ZXItcmVuZGVyZXJcIjogXCJodHRwczovL3NmYy52dWVqcy5vcmcvc2VydmVyLXJlbmRlcmVyLmVzbS1icm93c2VyLmpzXCJcbiAgfVxufSJ9" target="_blank" rel="noopener noreferrer">온라인 연습장으로 실행하기</a></p><p><code>watch</code> 옵션은 점으로 구분된 경로도 지원합니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 참고: 단순 경로만 가능합니다. 표현식은 지원되지 않습니다.</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">some.nested.key</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div>',4),o("div",{class:"composition-api"},[o("p",null,[p("Composition API를 사용하는 경우, "),o("a",{href:"/api/reactivity-core.html#watch"},[o("code",null,"watch"),p(" 함수")]),p("를 사용하여 반응형 속성이 변경될 때마다 함수를 실행할 수 있습니다:")]),o("div",{class:"language-vue"},[o("pre",null,[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"<"),o("span",{style:{color:"#F07178"}},"script"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"setup"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF","font-style":"italic"}},"import"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#A6ACCD"}},"ref"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#A6ACCD"}},"watch"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"from"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"vue"),o("span",{style:{color:"#89DDFF"}},"'")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," question "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"ref"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"''"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," answer "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"ref"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"질문에는 일반적으로 물음표가 포함됩니다."),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// watch는 ref에서 직접 작동합니다")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"(question"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"async"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"("),o("span",{style:{color:"#A6ACCD"}},"newQuestion"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," oldQuestion"),o("span",{style:{color:"#89DDFF"}},")"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"if"),o("span",{style:{color:"#F07178"}}," ("),o("span",{style:{color:"#A6ACCD"}},"newQuestion"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"indexOf"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"?"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#F07178"}},") "),o("span",{style:{color:"#89DDFF"}},">"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"-"),o("span",{style:{color:"#F78C6C"}},"1"),o("span",{style:{color:"#F07178"}},") "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#A6ACCD"}},"answer"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"생각 중..."),o("span",{style:{color:"#89DDFF"}},"'")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"try"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"      "),o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#A6ACCD"}},"res"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"await"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#82AAFF"}},"fetch"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"https://yesno.wtf/api"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"      "),o("span",{style:{color:"#A6ACCD"}},"answer"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#F07178"}}," ("),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"await"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#A6ACCD"}},"res"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"json"),o("span",{style:{color:"#F07178"}},"())"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"answer"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"==="),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"yes"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"?"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"네"),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"아니오"),o("span",{style:{color:"#89DDFF"}},"'")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF","font-style":"italic"}},"catch"),o("span",{style:{color:"#F07178"}}," ("),o("span",{style:{color:"#A6ACCD"}},"error"),o("span",{style:{color:"#F07178"}},") "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"      "),o("span",{style:{color:"#A6ACCD"}},"answer"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#C3E88D"}},"에러! API에 연결할 수 없습니다. "),o("span",{style:{color:"#89DDFF"}},"'"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#89DDFF"}},"+"),o("span",{style:{color:"#F07178"}}," "),o("span",{style:{color:"#A6ACCD"}},"error")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#89DDFF"}},"}")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"</"),o("span",{style:{color:"#F07178"}},"script"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"<"),o("span",{style:{color:"#F07178"}},"template"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"<"),o("span",{style:{color:"#F07178"}},"p"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    예/아니오 질문:")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"    "),o("span",{style:{color:"#89DDFF"}},"<"),o("span",{style:{color:"#F07178"}},"input"),o("span",{style:{color:"#89DDFF"}}," "),o("span",{style:{color:"#C792EA"}},"v-model"),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#89DDFF"}},'"'),o("span",{style:{color:"#A6ACCD"}},"question"),o("span",{style:{color:"#89DDFF"}},'"'),o("span",{style:{color:"#89DDFF"}}," />")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"</"),o("span",{style:{color:"#F07178"}},"p"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"<"),o("span",{style:{color:"#F07178"}},"p"),o("span",{style:{color:"#89DDFF"}},">{{"),o("span",{style:{color:"#A6ACCD"}}," answer "),o("span",{style:{color:"#89DDFF"}},"}}</"),o("span",{style:{color:"#F07178"}},"p"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"</"),o("span",{style:{color:"#F07178"}},"template"),o("span",{style:{color:"#89DDFF"}},">")]),p("\n"),o("span",{class:"line"})])])]),o("p",null,[o("a",{href:"https://sfc.vuejs.org/#eyJBcHAudnVlIjoiPHNjcmlwdCBzZXR1cD5cbmltcG9ydCB7IHJlZiwgd2F0Y2ggfSBmcm9tICd2dWUnXG5cbmNvbnN0IHF1ZXN0aW9uID0gcmVmKCcnKVxuY29uc3QgYW5zd2VyID0gcmVmKCfsp4jrrLjsl5DripQg7J2867CY7KCB7Jy866GcIOusvOydjO2RnOqwgCDtj6ztlajrkKnri4jri6QuJylcblxuLy8gd2F0Y2jripQgcmVm7JeQ7IScIOyngeygkSDsnpHrj5ntlanri4jri6RcbndhdGNoKHF1ZXN0aW9uLCBhc3luYyAobmV3UXVlc3Rpb24sIG9sZFF1ZXN0aW9uKSA9PiB7XG4gIGlmIChuZXdRdWVzdGlvbi5pbmRleE9mKCc/JykgPiAtMSkge1xuICAgIGFuc3dlci52YWx1ZSA9ICfsg53qsIEg7KSRLi4uJ1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBmZXRjaCgnaHR0cHM6Ly95ZXNuby53dGYvYXBpJylcbiAgICAgIGFuc3dlci52YWx1ZSA9IChhd2FpdCByZXMuanNvbigpKS5hbnN3ZXIgPT09ICd5ZXMnID8gJ+uEpCcgOiAn7JWE64uI7JikJ1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBhbnN3ZXIudmFsdWUgPSAn7Jik66WYISBBUEnsl5Ag7Jew6rKw7ZWgIOyImCDsl4bsirXri4jri6QuICcgKyBlcnJvclxuICAgIH1cbiAgfVxufSlcbjwvc2NyaXB0PlxuXG48dGVtcGxhdGU+XG4gIDxwPlxuICAgIOyYiC/slYTri4jsmKQg7KeI66y4OlxuICAgIDxpbnB1dCB2LW1vZGVsPVwicXVlc3Rpb25cIiAvPlxuICA8L3A+XG4gIDxwPnt7IGFuc3dlciB9fTwvcD5cbjwvdGVtcGxhdGU+IiwiaW1wb3J0LW1hcC5qc29uIjoie1xuICBcImltcG9ydHNcIjoge1xuICAgIFwidnVlXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3Z1ZS5ydW50aW1lLmVzbS1icm93c2VyLmpzXCIsXG4gICAgXCJ2dWUvc2VydmVyLXJlbmRlcmVyXCI6IFwiaHR0cHM6Ly9zZmMudnVlanMub3JnL3NlcnZlci1yZW5kZXJlci5lc20tYnJvd3Nlci5qc1wiXG4gIH1cbn0ifQ==",target:"_blank",rel:"noopener noreferrer"},"온라인 연습장으로 실행하기")]),o("h3",{"https:vuejs.orgguideessentialswatchers.html#watch-source-types":"",id:"감시-대상-타입",tabindex:"-1"},[p("감시 대상 타입 "),o("a",{class:"header-anchor",href:"#감시-대상-타입","aria-hidden":"true"},"#")]),o("p",null,[o("code",null,"watch"),p('의 첫 번째 인자는 다양한 유형의 반응형 "소스"가 될 수 있습니다. ref(계산된 ref 포함), 반응형 객체, getter 함수 또는 여러 소스의 배열이 될 수 있습니다:')]),o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," x "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"ref"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#F78C6C"}},"0"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," y "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"ref"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#F78C6C"}},"0"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// 단일 ref")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"(x"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"("),o("span",{style:{color:"#A6ACCD"}},"newX"),o("span",{style:{color:"#89DDFF"}},")"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#A6ACCD"}},"console"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"log"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#C3E88D"}},"x값: "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"newX"),o("span",{style:{color:"#89DDFF"}},"}`"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// getter")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"(")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"()"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," x"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value "),o("span",{style:{color:"#89DDFF"}},"+"),o("span",{style:{color:"#A6ACCD"}}," y"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value"),o("span",{style:{color:"#89DDFF"}},",")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"("),o("span",{style:{color:"#A6ACCD"}},"sum"),o("span",{style:{color:"#89DDFF"}},")"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#A6ACCD"}},"console"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"log"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#C3E88D"}},"x + y: "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"sum"),o("span",{style:{color:"#89DDFF"}},"}`"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// 여러 소스의 배열")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"([x"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"()"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," y"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"value]"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"(["),o("span",{style:{color:"#A6ACCD"}},"newX"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," newY"),o("span",{style:{color:"#89DDFF"}},"])"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#A6ACCD"}},"console"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"log"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#C3E88D"}},"x는 "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"newX"),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#C3E88D"}},"이고, y는 "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"newY"),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#C3E88D"}}," 입니다."),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"})])])]),o("p",null,"다음과 같이 반응형 객체의 속성을 감시할 수는 없습니다:"),o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#C792EA"}},"const"),o("span",{style:{color:"#A6ACCD"}}," obj "),o("span",{style:{color:"#89DDFF"}},"="),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#82AAFF"}},"reactive"),o("span",{style:{color:"#A6ACCD"}},"("),o("span",{style:{color:"#89DDFF"}},"{"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F07178"}},"count"),o("span",{style:{color:"#89DDFF"}},":"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#F78C6C"}},"0"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"}),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#676E95","font-style":"italic"}},"// 이것은 watch()에 숫자를 전달하기 때문에 작동하지 않습니다.")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"(obj"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},","),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"("),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},")"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#A6ACCD"}},"console"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"log"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#C3E88D"}},"count 값: "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},"}`"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#89DDFF"}},"}"),o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"})])])]),o("p",null,"대신 getter를 사용하십시오:"),o("div",{class:"language-js"},[o("pre",null,[o("code",null,[o("span",{class:"line"},[o("span",{style:{color:"#82AAFF"}},"watch"),o("span",{style:{color:"#A6ACCD"}},"(")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"()"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," obj"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},",")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},"  "),o("span",{style:{color:"#89DDFF"}},"("),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},")"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#C792EA"}},"=>"),o("span",{style:{color:"#A6ACCD"}}," "),o("span",{style:{color:"#89DDFF"}},"{")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"    "),o("span",{style:{color:"#A6ACCD"}},"console"),o("span",{style:{color:"#89DDFF"}},"."),o("span",{style:{color:"#82AAFF"}},"log"),o("span",{style:{color:"#F07178"}},"("),o("span",{style:{color:"#89DDFF"}},"`"),o("span",{style:{color:"#C3E88D"}},"count 값: "),o("span",{style:{color:"#89DDFF"}},"${"),o("span",{style:{color:"#A6ACCD"}},"count"),o("span",{style:{color:"#89DDFF"}},"}`"),o("span",{style:{color:"#F07178"}},")")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#F07178"}},"  "),o("span",{style:{color:"#89DDFF"}},"}")]),p("\n"),o("span",{class:"line"},[o("span",{style:{color:"#A6ACCD"}},")")]),p("\n"),o("span",{class:"line"})])])])],-1),a('<h2 id="deep-watchers" tabindex="-1">깊은 감시자 <a class="header-anchor" href="#deep-watchers" aria-hidden="true">#</a></h2><div class="options-api"><p><code>watch</code>는 기본적으로 얕습니다. 콜백은 감시된 속성에 새 값이 할당되었을 때만 트리거됩니다. 중첩된 속성 변경에는 트리거되지 않습니다. 중첩된 모든 변경사항에 대해 콜백을 실행하려면 깊은 감시자를 사용해야 합니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">someObject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 참고:</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// someObject가 다른 객체로 교체되지 않는 한,</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// newValue와 oldValue는 같습니다.</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 둘 다 동일한 객체를 참고하고 있기 때문입니다!</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><div class="composition-api"><p><code>watch()</code>로 반응형 객체를 직접 호출하면 암시적으로 깊은 감시자가 생성됩니다. 콜백은 중첩된 모든 변경사항에 대해 실행됩니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> someObject </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(someObject</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 중첩된 속성 변경사항이 있을 경우 실행됩니다.</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 참고:</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// `newValue`와 `oldValue`는 같습니다.</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 둘 다 동일한 객체를 참고하고 있기 때문입니다!</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">someObject</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"></span></code></pre></div><p>위 예제는 반응형 객체를 반환하는 getter 입니다. 아래의 경우 getter가 다른 객체를 반환하는 경우에만 콜백이 실행됩니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> state </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">reactive</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">someObject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someObject</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// state.someObject가 교체될 때만 실행됩니다.</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>그러나 <code>deep</code> 옵션을 명시적으로 사용하여 두 번째 경우(위 예제)를 깊은 감시자로 강제할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> state</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">someObject</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newValue</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> oldValue</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 참고: </span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// state.someObject가 교체되지 않는 한 여기에서</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// `newValue`와 `oldValue`는 같습니다.</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">deep</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div></div><div class="warning custom-block"><p class="custom-block-title">사용 시 주의사항</p><p>깊은 감시는 감시된 객체의 모든 중첩 속성을 탐색하므로, 큰 데이터 구조에서 사용할 때 비용이 많이 들 수 있습니다. 성능에 영향을 주는지 고려해서 필요한 경우에만 사용하십시오.</p></div><div class="options-api"><h2 id="eager-watchers" tabindex="-1">열성적인 감시자 <a class="header-anchor" href="#eager-watchers" aria-hidden="true">#</a></h2><p><code>watch</code>는 기본적으로 게으릅니다(lazy). 콜백은 감시된 소스가 변경되기 전까지 호출되지 않습니다. 그러나 어떤 경우에는 동일한 콜백 로직이 열성적으로 실행되기를 원할 수 있습니다. 예를 들어 최초 데이터가 구성된 후 콜백이 실행되기를 원할 수 있습니다.</p><p><code>handler</code> 함수와 <code>immediate: true</code> 옵션으로 구성된 객체를 사용해 감시자를 선언함으로써 콜백이 즉시 실행되도록 할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">question</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newQuestion</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 이제 컴포넌트 생성 시</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// `beforeCreate`와 `created` 훅 사이에</span></span>\n<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// 한 번 실행됩니다.</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 열성적으로 콜백 실행</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">immediate</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><div class="composition-api"><h2 id="watcheffect" tabindex="-1"><code>watchEffect()</code> <a class="header-anchor" href="#watcheffect" aria-hidden="true">#</a></h2><p><code>watch()</code>는 게으르므로(lazy) 감시 소스가 변경될 때까지 콜백이 호출되지 않습니다. 그러나 어떤 경우에는 동일한 콜백 로직이 열성적으로 실행되기를 원할 수 있습니다. 예를 들어 초기 데이터를 가져온 다음 관련 상태가 변경될 때마다 데이터를 다시 가져오기를 원할 수 있습니다. 다음과 같이 구현할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">fetchData</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 즉시 데이터 가져오기</span></span>\n<span class="line"><span style="color:#82AAFF;">fetchData</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// ...그런다음 url 변경을 감시하도록 watch를 실행합니다.</span></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(url</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> fetchData)</span></span>\n<span class="line"></span></code></pre></div><p>위 구현 로직은 <a href="/api/reactivity-core.html#watcheffect"><code>watchEffect()</code></a>로 단순화할 수 있습니다. <code>watchEffect()</code>를 사용하면 반응형 의존성을 자동으로 감시하면서, 최초에 즉시 사이드 이펙트를 한 번 실행합니다. 위의 예는 다음과 같이 다시 작성할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> url </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://...</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p>이제 콜백이 최초에 즉시 한 번 실행됩니다. 실행되는 동안에도 자동으로 의존성인 <code>url.value</code>를 추적합니다(계산된 속성과 유사). <code>url.value</code>가 변경될 때마다 콜백이 다시 실행됩니다.</p><p><code>watchEffect</code>와 반응형 데이터 가져오기 동작에 대해 <a href="/examples/#fetching-data">이 예제</a>에서 확인할 수 있습니다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p><code>watchEffect</code>는 <strong>동기적</strong> 실행 중에만 의존성을 추적합니다. 비동기 콜백과 함께 사용할 때 첫 번째 <code>await</code> 틱 이전에 접근한 속성들만 추적합니다.</p></div><h3 id="watch-vs-watcheffect" tabindex="-1"><code>watch</code> vs. <code>watchEffect</code> <a class="header-anchor" href="#watch-vs-watcheffect" aria-hidden="true">#</a></h3><p><code>watch</code>와 <code>&#39;watchEffect</code>&#39; 둘 다 사이드 이펙트를 반응적으로 실행할 수 있게 해줍니다. 주요 차이점은 반응형 의존성을 추적하는 방식입니다:</p><ul><li><p><code>watch</code>는 명시적으로 감시된 소스만 추적합니다. 콜백 내에서 조회하는 항목은 추적하지 않습니다. 또한 콜백은 소스가 실제로 변경된 경우에만 트리거됩니다. <code>watch</code>는 의존성 추적을 사이드 이펙트와 분리하여, 콜백이 실행되어야 하는 시기를 보다 정확하게 제어할 수 있습니다.</p></li><li><p>반면 <code>watchEffect</code>는 의존성 추적과 사이드 이펙트를 하나의 단계로 결합합니다. 동기적(sync) 실행 중에 조회되는 모든 반응형 속성을 자동으로 추적합니다. 이것은 더 편리하고 일반적으로 더 간결한 코드를 생성하지만, 콜백이 실행되어야 하는 시기가 덜 명시적입니다.</p></li></ul></div><h2 id="callback-flush-timing" tabindex="-1">콜백 실행 타이밍 <a class="header-anchor" href="#callback-flush-timing" aria-hidden="true">#</a></h2><p>반응형 상태를 변경하면 Vue 컴포넌트 업데이트와 사용자가 만든 감시자 콜백이 모두 실행됩니다.</p><p>기본적으로 개발자가 생성한 감시자 콜백은 Vue 컴포넌트가 <strong>업데이트되기 전</strong>에 실행됩니다. 따라서 감시자 콜백 내에서 DOM에 접근하면 DOM이 Vue에 의해 업데이트되기 전의 상태입니다.</p><p>Vue에 의해 업데이트된 후 의 DOM을 감시자 콜백에서 접근하려면, <code>flush: &#39;post&#39;</code> 옵션을 지정해야 합니다:</p><div class="options-api"><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">key</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><div class="composition-api"><div class="language-js"><pre><code><span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(source</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">post</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div><p><code>flush: &#39;post&#39;</code> 옵션이 적용된 <code>watchEffect()</code>를 보다 간편하게 사용하기 위해서 <code>watchPostEffect()</code>를 사용할 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">watchPostEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchPostEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* Vue가 업데이트 된 후 실행됩니다 */</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div></div><p>기본적으로 <code>flush: &#39;pre&#39;|&#39;post&#39;</code> 옵션은 콜백을 버퍼링하여, 동일한 &quot;틱(tick)&quot;에서 여러 번 상태 변경이 되더라도, 마지막에 한 번만 호출됩니다.</p><p>동일한 틱 내에 여러 번 상태 변경 시 마다 동기적으로 콜백을 호출해야 하는 경우, <code>flush: &#39;sync&#39;</code> 옵션을 사용해야 합니다. 단, 일반적으로 이러한 동작은 비효율적이므로 사용하려는 경우, 정말 필요한지 다시 한번 고민해봐야 합니다.</p><div class="options-api"><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#82AAFF;">data</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> (</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">count</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">handler</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> preVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">        </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">변경이 감지됨!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">preVal</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">methods</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">increment</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 이어서 callback이 실행됨</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 역시 callback이 실행됨</span></span>\n<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// 또 callback이 실행됨</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div></div><div class="composition-api"><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> count </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#F78C6C;">0</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> callback </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> preVal</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">변경이 감지됨!</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> val</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> preVal)</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> options </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">flush</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">sync</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watch</span><span style="color:#A6ACCD;">(count</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 이어서 callback이 실행됨</span></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 역시 callback이 실행됨</span></span>\n<span class="line"><span style="color:#A6ACCD;">count</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#89DDFF;">++</span></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 또 callback이 실행됨</span></span>\n<span class="line"></span></code></pre></div></div><div class="options-api"><h2 id="this-watch" tabindex="-1"><code>this.$watch()</code> <a class="header-anchor" href="#this-watch" aria-hidden="true">#</a></h2><p><a href="/api/component-instance.html#watch"><code>$watch()</code> 인스턴스 메서드</a>를 사용하여 감시자를 선언적으로 생성할 수도 있습니다.</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">created</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">question</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">newQuestion</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// ...</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>이는 감시자를 조건부로 설정해야 하거나, 사용자 상호 작용에 대한 응답으로만 무언가를 감시해야 할 때 유용합니다. 또한 감시자를 조기에 중지할 수 있습니다.</p></div><h2 id="stopping-a-watcher" tabindex="-1">감시자 중지하기 <a class="header-anchor" href="#stopping-a-watcher" aria-hidden="true">#</a></h2><div class="options-api"><p><code>watch</code> 옵션이나 <code>$watch()</code> 인스턴스 메서드를 사용하여 선언된 감시자는 해당 컴포넌트가 마운트 해제될 때 자동으로 중지되므로 대부분의 경우 감시자를 직접 중지하는 것에 대해 고민할 필요가 없습니다.</p><p>드물게 해당 컴포넌트가 마운트 해제되기 전에 감시자를 중지해야 하는 경우를 위해 <code>$watch()</code> API는 이 기능을 수행할 수 있게 함수를 반환합니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">this.</span><span style="color:#82AAFF;">$watch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> callback)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// ...나중에 감시자가 더 이상 필요하지 않을 때:</span></span>\n<span class="line"><span style="color:#82AAFF;">unwatch</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre></div></div><div class="composition-api"><p><code>setup()</code> 또는 <code>&lt;script setup&gt;</code> 내부에서 동기적으로 선언된 감시자는 해당 컴포넌트 인스턴스에 바인딩되며, 해당 컴포넌트가 마운트 해제되면 자동으로 중지됩니다. 대부분의 경우 감시자를 직접 중지하는 것에 대해 고민할 필요가 없습니다.</p><p>여기서 핵심은 감시자가 <strong>동기적</strong>(synchronously)으로 생성되어야 한다는 것입니다. 감시자가 비동기 콜백에서 생성된 경우, 감시자는 해당 컴포넌트에 바인딩되지 않으며 메모리 누수를 방지하기 위해 수동으로 중지해야 합니다. 다음은 이러한 케이스에 해당하는 예제입니다:</p><div class="language-vue"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">setup</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">watchEffect</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// 이 감시자는 컴포넌트가 마운트 해제되면 자동으로 중지됩니다.</span></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// ...하지만 이것은 자동으로 중지되지 않습니다.</span></span>\n<span class="line"><span style="color:#82AAFF;">setTimeout</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#F07178;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">},</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">100</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>감시자를 수동으로 중지하려면 반환된 함수를 사용하십시오. 이것은 <code>watch</code>와 <code>watchEffect</code> 모두에서 작동합니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> unwatch </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#676E95;font-style:italic;">// ...나중에 감시자가 더 이상 필요하지 않을 때:</span></span>\n<span class="line"><span style="color:#82AAFF;">unwatch</span><span style="color:#A6ACCD;">()</span></span>\n<span class="line"></span></code></pre></div><p>감시자를 비동기식으로 생성해야 하는 경우는 거의 없으며, 가능하면 동기식 생성을 해야 합니다. 일부 비동기 데이터를 기다려야 하는 경우, 감시자 로직을 조건부로 만들 수 있습니다:</p><div class="language-js"><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// 비동기적으로 로드할 데이터</span></span>\n<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> data </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">ref</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">null</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#82AAFF;">watchEffect</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">value</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// 데이터가 로드될 때 실행될 로직</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>\n<span class="line"></span></code></pre></div></div>',20)];var r=s(c,[["render",function(s,a,o,p,e,c){return l(),n("div",null,t)}]]);export{e as __pageData,r as default};
